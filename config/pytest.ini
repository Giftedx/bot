[pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers
markers =
    integration: mark test as an integration test
    asyncio: mark test as an async test
    unit: mark test as a unit test
    slow: mark test as a slow test

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test running configuration
addopts =
    --strict-markers
    --strict-config
    --tb=short
    -v
    --durations=10
    --maxfail=3
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --no-cov-on-fail

# Environment variables for tests
env =
    PYTHONPATH=src
    TESTING=true
    DISCORD_TOKEN=mock_token
    REDIS_URL=redis://localhost:6379/0

# Disable warnings we don't care about
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
    # Keep discord.py warnings
    default::discord.DiscordWarning

# Test categories
[test-categories]
unit = tests/test_*.py
integration = tests/integration/test_*.py

# Coverage settings
[coverage:run]
source = src
branch = True
omit =
    src/main.py
    src/*/__init__.py
    src/*/migrations/*
    src/*/tests/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError:
    raise AssertionError

# Pytest asyncio settings
[tool:pytest]
asyncio_mode = auto
