name: Fuzzing

on:
  schedule:
    - cron: "0 0 * * 6" # Weekly on Saturday
  workflow_dispatch: # Allow manual trigger
    inputs:
      duration:
        description: "Fuzzing duration in minutes"
        required: true
        type: number
        default: 120
      target:
        description: "Fuzzing target"
        required: true
        type: choice
        options:
          - all
          - input
          - api
          - protocol
          - state
      intensity:
        description: "Fuzzing intensity (1-5)"
        required: true
        type: number
        default: 3

jobs:
  prepare:
    name: Prepare Fuzzing Environment
    runs-on: ubuntu-latest
    outputs:
      test_id: ${{ steps.setup.outputs.test_id }}

    steps:
      - name: Generate test ID
        id: setup
        run: |
          echo "test_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install atheris pythonfuzz boofuzz radamsa afl-python3

  input-fuzzing:
    name: Input Fuzzing
    needs: prepare
    if: github.event.inputs.target == 'input' || github.event.inputs.target == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Fuzz command inputs
        run: |
          python scripts/fuzzing/fuzz_commands.py \
            --duration ${{ github.event.inputs.duration || 120 }} \
            --intensity ${{ github.event.inputs.intensity || 3 }}

      - name: Fuzz message content
        run: |
          python scripts/fuzzing/fuzz_messages.py \
            --duration ${{ github.event.inputs.duration || 120 }} \
            --intensity ${{ github.event.inputs.intensity || 3 }}

      - name: Generate input fuzzing report
        run: |
          {
            echo "# Input Fuzzing Report"
            echo "## Command Fuzzing"
            cat command_fuzzing.json | jq -r '.findings[] | "- " + .'
            echo "## Message Fuzzing"
            cat message_fuzzing.json | jq -r '.findings[] | "- " + .'
          } > input-fuzzing-report.md

  api-fuzzing:
    name: API Fuzzing
    needs: prepare
    if: github.event.inputs.target == 'api' || github.event.inputs.target == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Fuzz API endpoints
        run: |
          python scripts/fuzzing/fuzz_api.py \
            --duration ${{ github.event.inputs.duration || 120 }} \
            --intensity ${{ github.event.inputs.intensity || 3 }}

      - name: Fuzz API parameters
        run: |
          python scripts/fuzzing/fuzz_parameters.py \
            --duration ${{ github.event.inputs.duration || 120 }} \
            --intensity ${{ github.event.inputs.intensity || 3 }}

      - name: Generate API fuzzing report
        run: |
          {
            echo "# API Fuzzing Report"
            echo "## Endpoint Fuzzing"
            cat endpoint_fuzzing.json | jq -r '.findings[] | "- " + .'
            echo "## Parameter Fuzzing"
            cat parameter_fuzzing.json | jq -r '.findings[] | "- " + .'
          } > api-fuzzing-report.md

  protocol-fuzzing:
    name: Protocol Fuzzing
    needs: prepare
    if: github.event.inputs.target == 'protocol' || github.event.inputs.target == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Fuzz Discord protocol
        run: |
          python scripts/fuzzing/fuzz_protocol.py \
            --duration ${{ github.event.inputs.duration || 120 }} \
            --intensity ${{ github.event.inputs.intensity || 3 }}

      - name: Fuzz network communication
        run: |
          python scripts/fuzzing/fuzz_network.py \
            --duration ${{ github.event.inputs.duration || 120 }} \
            --intensity ${{ github.event.inputs.intensity || 3 }}

      - name: Generate protocol fuzzing report
        run: |
          {
            echo "# Protocol Fuzzing Report"
            echo "## Discord Protocol"
            cat protocol_fuzzing.json | jq -r '.findings[] | "- " + .'
            echo "## Network Communication"
            cat network_fuzzing.json | jq -r '.findings[] | "- " + .'
          } > protocol-fuzzing-report.md

  state-fuzzing:
    name: State Fuzzing
    needs: prepare
    if: github.event.inputs.target == 'state' || github.event.inputs.target == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Fuzz state transitions
        run: |
          python scripts/fuzzing/fuzz_state.py \
            --duration ${{ github.event.inputs.duration || 120 }} \
            --intensity ${{ github.event.inputs.intensity || 3 }}

      - name: Fuzz data persistence
        run: |
          python scripts/fuzzing/fuzz_persistence.py \
            --duration ${{ github.event.inputs.duration || 120 }} \
            --intensity ${{ github.event.inputs.intensity || 3 }}

      - name: Generate state fuzzing report
        run: |
          {
            echo "# State Fuzzing Report"
            echo "## State Transitions"
            cat state_fuzzing.json | jq -r '.findings[] | "- " + .'
            echo "## Data Persistence"
            cat persistence_fuzzing.json | jq -r '.findings[] | "- " + .'
          } > state-fuzzing-report.md

  analyze:
    name: Analyze Results
    needs:
      [prepare, input-fuzzing, api-fuzzing, protocol-fuzzing, state-fuzzing]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze crashes
        run: |
          python scripts/fuzzing/analyze_crashes.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output crash_analysis.json

      - name: Analyze vulnerabilities
        run: |
          python scripts/fuzzing/analyze_vulnerabilities.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output vulnerability_analysis.json

      - name: Generate analysis report
        run: |
          {
            echo "# Fuzzing Analysis Report"
            echo "## Crash Analysis"
            cat crash_analysis.json | jq -r '.findings[] | "- " + .'
            echo "## Vulnerability Analysis"
            cat vulnerability_analysis.json | jq -r '.findings[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs:
      [
        prepare,
        input-fuzzing,
        api-fuzzing,
        protocol-fuzzing,
        state-fuzzing,
        analyze,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Fuzzing Test Report"
            echo "Test ID: ${{ needs.prepare.outputs.test_id }}"
            
            echo "## Input Fuzzing"
            cat input-fuzzing-report.md
            
            echo "## API Fuzzing"
            cat api-fuzzing-report.md
            
            echo "## Protocol Fuzzing"
            cat protocol-fuzzing-report.md
            
            echo "## State Fuzzing"
            cat state-fuzzing-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/fuzzing/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > fuzzing-report.md

      - name: Create security issues
        if: contains(needs.*.result, 'failure') || github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('fuzzing-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🐛 Fuzzing Test Results',
              body: report,
              labels: ['security', 'fuzzing', 'bug']
            });

      - name: Update metrics
        run: |
          {
            echo "fuzzing_completion $(date +%s)"
            echo "vulnerabilities_found $(python scripts/fuzzing/count_vulnerabilities.py analysis-report.md)"
          } > fuzzing_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/fuzzing \
            --data-binary "@fuzzing_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Fuzzing Complete"
          description: |
            Test ID: ${{ needs.prepare.outputs.test_id }}
            Duration: ${{ github.event.inputs.duration || 120 }} minutes
            Intensity: ${{ github.event.inputs.intensity || 3 }}/5

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Fuzzing Bot"
