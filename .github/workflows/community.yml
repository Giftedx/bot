name: Community Management

on:
  issues:
    types: [opened, closed, reopened, labeled]
  pull_request:
    types: [opened, closed, reopened]
  discussion:
    types: [created, answered, unanswered, labeled, unlabeled]
  discussion_comment:
    types: [created, edited, deleted]
  schedule:
    - cron: "0 0 * * 1" # Weekly on Monday
  workflow_dispatch: # Allow manual trigger
    inputs:
      task_type:
        description: "Type of community management"
        required: true
        type: choice
        options:
          - all
          - welcome
          - support
          - engagement
          - moderation

jobs:
  prepare:
    name: Prepare Community Environment
    runs-on: ubuntu-latest
    outputs:
      task_id: ${{ steps.setup.outputs.task_id }}

    steps:
      - name: Generate task ID
        id: setup
        run: |
          echo "task_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

  welcome:
    name: Welcome New Contributors
    needs: prepare
    if: |
      (github.event_name == 'issues' || github.event_name == 'pull_request') && 
      github.event.action == 'opened' && 
      github.event.sender.type == 'User'
    runs-on: ubuntu-latest
    steps:
      - name: Check first contribution
        uses: actions/github-script@v6
        with:
          script: |
            const author = context.payload.sender.login;
            const contributions = await github.rest.search.issuesAndPullRequests({
              q: `author:${author} repo:${context.repo.owner}/${context.repo.repo}`
            });
            return contributions.data.total_count === 1;

      - name: Send welcome message
        if: steps.check-first.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const welcomeMessage = `
            üëã Welcome to our project, @${context.payload.sender.login}!

            Thank you for your first contribution! Here are some helpful resources:
            - üìñ [Contributing Guidelines](CONTRIBUTING.md)
            - üîç [Code of Conduct](CODE_OF_CONDUCT.md)
            - üí° [Documentation](docs/)

            Feel free to ask any questions!
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
              body: welcomeMessage
            });

  support:
    name: Community Support
    needs: prepare
    if: |
      github.event_name == 'issues' || 
      github.event_name == 'discussion' || 
      github.event.inputs.task_type == 'support' || 
      github.event.inputs.task_type == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Categorize support requests
        run: |
          python scripts/community/categorize_support.py \
            --output support_categories.json

      - name: Generate support responses
        run: |
          python scripts/community/generate_responses.py \
            --categories support_categories.json \
            --output support_responses.json

      - name: Post responses
        uses: actions/github-script@v6
        with:
          script: |
            const responses = require('./support_responses.json');
            for (const response of responses.responses) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: response.issue_number,
                body: response.message
              });
            }

  engagement:
    name: Community Engagement
    needs: prepare
    if: github.event.inputs.task_type == 'engagement' || github.event.inputs.task_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Track engagement metrics
        run: |
          python scripts/community/track_engagement.py \
            --output engagement_metrics.json

      - name: Identify active contributors
        run: |
          python scripts/community/identify_contributors.py \
            --output active_contributors.json

      - name: Generate engagement report
        run: |
          {
            echo "# Community Engagement Report"
            echo "## Engagement Metrics"
            cat engagement_metrics.json | jq -r '.metrics[] | "- " + .'
            echo "## Active Contributors"
            cat active_contributors.json | jq -r '.contributors[] | "- " + .'
          } > engagement-report.md

  moderation:
    name: Community Moderation
    needs: prepare
    if: github.event.inputs.task_type == 'moderation' || github.event.inputs.task_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Check content guidelines
        run: |
          python scripts/community/check_guidelines.py \
            --output guideline_checks.json

      - name: Monitor discussions
        run: |
          python scripts/community/monitor_discussions.py \
            --output discussion_monitoring.json

      - name: Generate moderation report
        run: |
          {
            echo "# Community Moderation Report"
            echo "## Guideline Compliance"
            cat guideline_checks.json | jq -r '.checks[] | "- " + .'
            echo "## Discussion Monitoring"
            cat discussion_monitoring.json | jq -r '.monitoring[] | "- " + .'
          } > moderation-report.md

  analyze:
    name: Analyze Results
    needs: [prepare, welcome, support, engagement, moderation]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze community health
        run: |
          python scripts/community/analyze_health.py \
            --task-id ${{ needs.prepare.outputs.task_id }} \
            --output health_analysis.json

      - name: Generate recommendations
        run: |
          python scripts/community/generate_recommendations.py \
            --analysis health_analysis.json \
            --output recommendations.json

      - name: Generate analysis report
        run: |
          {
            echo "# Community Analysis Report"
            echo "## Health Metrics"
            cat health_analysis.json | jq -r '.metrics[] | "- " + .'
            echo "## Recommendations"
            cat recommendations.json | jq -r '.recommendations[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs: [prepare, welcome, support, engagement, moderation, analyze]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Community Management Report"
            echo "Task ID: ${{ needs.prepare.outputs.task_id }}"
            
            if [ -f "engagement-report.md" ]; then
              echo "## Community Engagement"
              cat engagement-report.md
            fi
            
            if [ -f "moderation-report.md" ]; then
              echo "## Community Moderation"
              cat moderation-report.md
            fi
            
            echo "## Analysis"
            cat analysis-report.md
          } > community-report.md

      - name: Create community summary
        if: github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('community-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üë• Community Management Summary',
              body: report,
              labels: ['community', 'report']
            });

      - name: Update metrics
        run: |
          {
            echo "community_management_completion $(date +%s)"
            echo "active_contributors $(cat engagement_metrics.json | jq '.active_contributors')"
            echo "response_rate $(cat engagement_metrics.json | jq '.response_rate')"
          } > community_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/community_management \
            --data-binary "@community_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Community Management Complete"
          description: |
            Task ID: ${{ needs.prepare.outputs.task_id }}
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Issues Found' || '‚úÖ Successful' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Community Bot"
