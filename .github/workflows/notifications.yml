name: Notifications

on:
  workflow_call: # Allow other workflows to trigger notifications
    inputs:
      notification_type:
        description: "Type of notification"
        required: true
        type: string
      priority:
        description: "Notification priority"
        required: true
        type: string
      message:
        description: "Notification message"
        required: true
        type: string
  schedule:
    - cron: "0 9 * * 1-5" # Daily digest on weekdays at 9 AM
  workflow_dispatch: # Allow manual trigger
    inputs:
      notification_type:
        description: "Type of notification"
        required: true
        type: choice
        options:
          - alert
          - digest
          - report
          - announcement
      priority:
        description: "Notification priority"
        required: true
        type: choice
        options:
          - high
          - medium
          - low
      message:
        description: "Custom message"
        required: false
        type: string

jobs:
  prepare:
    name: Prepare Notification
    runs-on: ubuntu-latest
    outputs:
      notification_id: ${{ steps.setup.outputs.notification_id }}

    steps:
      - name: Generate notification ID
        id: setup
        run: |
          echo "notification_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

  collect:
    name: Collect Information
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: Collect system status
        run: |
          python scripts/notifications/collect_status.py \
            --output system_status.json

      - name: Collect recent events
        run: |
          python scripts/notifications/collect_events.py \
            --output recent_events.json

      - name: Generate collection report
        run: |
          {
            echo "# Information Collection Report"
            echo "## System Status"
            cat system_status.json | jq -r '.status[] | "- " + .'
            echo "## Recent Events"
            cat recent_events.json | jq -r '.events[] | "- " + .'
          } > collection-report.md

  format:
    name: Format Notification
    needs: [prepare, collect]
    runs-on: ubuntu-latest

    steps:
      - name: Format for Discord
        run: |
          python scripts/notifications/format_discord.py \
            --type ${{ inputs.notification_type || github.event.inputs.notification_type }} \
            --priority ${{ inputs.priority || github.event.inputs.priority }} \
            --message "${{ inputs.message || github.event.inputs.message }}" \
            --collection collection-report.md \
            --output discord_message.json

      - name: Format for Email
        run: |
          python scripts/notifications/format_email.py \
            --type ${{ inputs.notification_type || github.event.inputs.notification_type }} \
            --priority ${{ inputs.priority || github.event.inputs.priority }} \
            --message "${{ inputs.message || github.event.inputs.message }}" \
            --collection collection-report.md \
            --output email_message.json

      - name: Generate format report
        run: |
          {
            echo "# Message Format Report"
            echo "## Discord Format"
            cat discord_message.json | jq -r '.message'
            echo "## Email Format"
            cat email_message.json | jq -r '.message'
          } > format-report.md

  send:
    name: Send Notifications
    needs: [prepare, format]
    runs-on: ubuntu-latest

    steps:
      - name: Send to Discord
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          nodetail: true
          title: ${{ fromJson(discord_message.json).title }}
          description: ${{ fromJson(discord_message.json).description }}
          color: ${{ fromJson(discord_message.json).color }}
          username: "Notification Bot"

      - name: Send Email
        if: inputs.priority == 'high' || github.event.inputs.priority == 'high'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ fromJson(email_message.json).subject }}
          body: ${{ fromJson(email_message.json).body }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: Notification Bot

      - name: Generate send report
        run: |
          {
            echo "# Notification Send Report"
            echo "## Discord Notification"
            echo "- Status: Sent"
            echo "- Timestamp: $(date -u)"
            if [ "${{ inputs.priority }}" = "high" ] || [ "${{ github.event.inputs.priority }}" = "high" ]; then
              echo "## Email Notification"
              echo "- Status: Sent"
              echo "- Timestamp: $(date -u)"
            fi
          } > send-report.md

  log:
    name: Log Notifications
    needs: [prepare, send]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Log to database
        run: |
          python scripts/notifications/log_notification.py \
            --id ${{ needs.prepare.outputs.notification_id }} \
            --type ${{ inputs.notification_type || github.event.inputs.notification_type }} \
            --priority ${{ inputs.priority || github.event.inputs.priority }} \
            --status ${{ needs.send.result }} \
            --output log_entry.json

      - name: Archive notification
        run: |
          python scripts/notifications/archive_notification.py \
            --id ${{ needs.prepare.outputs.notification_id }} \
            --collection collection-report.md \
            --format format-report.md \
            --send send-report.md \
            --output archive.json

      - name: Generate log report
        run: |
          {
            echo "# Notification Log Report"
            echo "## Log Entry"
            cat log_entry.json | jq -r '.entry'
            echo "## Archive Status"
            cat archive.json | jq -r '.status'
          } > log-report.md

  report:
    name: Generate Report
    needs: [prepare, collect, format, send, log]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Notification Report"
            echo "Notification ID: ${{ needs.prepare.outputs.notification_id }}"
            echo "Type: ${{ inputs.notification_type || github.event.inputs.notification_type }}"
            echo "Priority: ${{ inputs.priority || github.event.inputs.priority }}"
            
            echo "## Information Collection"
            cat collection-report.md
            
            echo "## Message Formatting"
            cat format-report.md
            
            echo "## Notification Delivery"
            cat send-report.md
            
            echo "## Logging"
            cat log-report.md
          } > notification-report.md

      - name: Update metrics
        run: |
          {
            echo "notification_sent $(date +%s)"
            echo "notification_success ${{ needs.send.result == 'success' }}"
          } > notification_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/notifications \
            --data-binary "@notification_metrics.txt"
