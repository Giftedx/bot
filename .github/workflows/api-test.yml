name: API Testing

on:
  push:
    paths:
      - "src/api/**"
      - "tests/api/**"
      - ".github/workflows/api-test.yml"
  pull_request:
    paths:
      - "src/api/**"
      - "tests/api/**"
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours
  workflow_dispatch: # Allow manual trigger
    inputs:
      api_version:
        description: "API version to test"
        required: false
        type: string
        default: "latest"
      test_suite:
        description: "Test suite to run"
        required: true
        type: choice
        options:
          - all
          - endpoints
          - integration
          - performance

jobs:
  test-api:
    name: API Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest-asyncio pytest-aiohttp pytest-cov requests-mock

      - name: Start API server
        run: |
          python -m src.api.main &
          sleep 5  # Wait for server to start

      - name: Run endpoint tests
        if: github.event.inputs.test_suite == 'endpoints' || github.event.inputs.test_suite == 'all' || github.event_name != 'workflow_dispatch'
        run: |
          pytest tests/api/test_endpoints.py \
            --cov=src/api \
            --cov-report=xml \
            --cov-report=term-missing \
            -v

      - name: Run integration tests
        if: github.event.inputs.test_suite == 'integration' || github.event.inputs.test_suite == 'all' || github.event_name != 'workflow_dispatch'
        run: |
          pytest tests/api/test_integration.py \
            --cov=src/api \
            --cov-append \
            -v

      - name: Run performance tests
        if: github.event.inputs.test_suite == 'performance' || github.event.inputs.test_suite == 'all' || github.event_name != 'workflow_dispatch'
        run: |
          pytest tests/api/test_performance.py \
            --benchmark-only \
            --benchmark-json benchmark.json \
            -v

      - name: Validate OpenAPI spec
        run: |
          pip install openapi-spec-validator
          openapi-spec-validator src/api/openapi.yaml

      - name: Generate API documentation
        run: |
          pip install sphinx sphinx-autodoc-openapi
          cd docs
          make html
          cd ..

      - name: Run contract tests
        run: |
          python tests/api/test_contracts.py

      - name: Generate test report
        run: |
          {
            echo "# API Test Report"
            
            echo "## Test Coverage"
            coverage report
            
            echo "## Performance Benchmarks"
            cat benchmark.json | jq '.benchmarks[] | {name: .name, mean: .stats.mean}'
            
            echo "## Endpoint Status"
            curl -s http://localhost:8000/health | jq '.'
            
            echo "## API Documentation"
            echo "Documentation has been generated in docs/build/html/"
          } > api-test-report.md

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: |
            coverage.xml
            benchmark.json
            api-test-report.md
            docs/build/html/

      - name: Check test coverage
        run: |
          coverage report --fail-under=80

      - name: Update metrics
        run: |
          {
            echo "api_tests_total $(date +%s)"
            echo "api_test_coverage $(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')"
            echo "api_test_failures $(pytest tests/api/ --cache-clear -v | grep failed | wc -l)"
          } > api_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/api_testing \
            --data-binary "@api_metrics.txt"

      - name: Create issue for failures
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('api-test-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ”¥ API Tests Failed',
              body: report,
              labels: ['api', 'test-failure', 'bug']
            });

      - name: Notify status
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "API Tests ${{ job.status }}"
          description: |
            Suite: ${{ github.event.inputs.test_suite || 'all' }}
            Version: ${{ github.event.inputs.api_version || 'latest' }}

            Check the workflow run for detailed results.
          color: ${{ job.status == 'success' && '0x00ff00' || '0xff0000' }}
          username: "API Test Bot"

  api-security:
    name: API Security Scan
    needs: test-api
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: "http://localhost:8000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Run API fuzzing
        run: |
          pip install aiohttp-swagger-fuzz
          python tests/api/fuzz_endpoints.py

      - name: Check for vulnerabilities
        run: |
          pip install safety
          safety check

      - name: Generate security report
        run: |
          {
            echo "# API Security Report"
            
            echo "## ZAP Scan Results"
            cat zap-report.html
            
            echo "## Fuzzing Results"
            cat fuzz-results.txt
            
            echo "## Dependency Security"
            safety check
          } > security-report.md

      - name: Create security issue
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ API Security Issues Detected',
              body: report,
              labels: ['api', 'security', 'high-priority']
            });
