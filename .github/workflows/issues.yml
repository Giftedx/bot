name: Issue Management

on:
  issues:
    types:
      [
        opened,
        edited,
        labeled,
        unlabeled,
        assigned,
        unassigned,
        closed,
        reopened,
      ]
  issue_comment:
    types: [created, edited, deleted]
  schedule:
    - cron: "0 0 * * *" # Daily at midnight
  workflow_dispatch: # Allow manual trigger
    inputs:
      task_type:
        description: "Type of issue management"
        required: true
        type: choice
        options:
          - all
          - triage
          - stale
          - cleanup
          - metrics

jobs:
  triage:
    name: Issue Triage
    if: github.event_name == 'issues' && github.event.action == 'opened'
    runs-on: ubuntu-latest

    steps:
      - name: Initial categorization
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const labels = [];

            // Categorize by title keywords
            if (issue.title.match(/bug|error|fail|crash/i)) {
              labels.push('bug');
            }
            if (issue.title.match(/feature|enhancement|improvement/i)) {
              labels.push('enhancement');
            }
            if (issue.title.match(/docs|documentation/i)) {
              labels.push('documentation');
            }

            // Add priority label based on content
            if (issue.body.match(/urgent|critical|emergency/i)) {
              labels.push('high-priority');
            }

            // Add initial labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: labels
            });

      - name: Assign team members
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            let assignee = null;

            // Assign based on labels
            if (issue.labels.find(l => l.name === 'bug')) {
              assignee = 'debug-team';
            }
            if (issue.labels.find(l => l.name === 'enhancement')) {
              assignee = 'feature-team';
            }

            if (assignee) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: [assignee]
              });
            }

      - name: Add initial comment
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: 'Thank you for your issue! Our team will review it shortly.'
            });

  stale:
    name: Stale Issue Management
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task_type == 'stale' || github.event.inputs.task_type == 'all'))

    steps:
      - name: Mark stale issues
        uses: actions/stale@v8
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          stale-issue-message: "This issue has been automatically marked as stale due to inactivity. It will be closed if no further activity occurs."
          close-issue-message: "This issue has been automatically closed due to inactivity."
          days-before-stale: 60
          days-before-close: 7
          stale-issue-label: "stale"
          exempt-issue-labels: "pinned,security,bug"

      - name: Generate stale report
        run: |
          python scripts/issues/generate_stale_report.py \
            --output stale-report.md

  cleanup:
    name: Issue Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task_type == 'cleanup' || github.event.inputs.task_type == 'all'))

    steps:
      - name: Clean duplicate issues
        uses: actions/github-script@v6
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            // Find and mark duplicates
            const duplicates = findDuplicateIssues(issues.data);
            for (const dup of duplicates) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dup.number,
                body: `This appears to be a duplicate of #${dup.originalIssue}`
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dup.number,
                state: 'closed',
                labels: ['duplicate']
              });
            }

      - name: Update issue references
        run: |
          python scripts/issues/update_references.py \
            --output reference-report.md

  metrics:
    name: Issue Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task_type == 'metrics' || github.event.inputs.task_type == 'all'))

    steps:
      - name: Calculate issue metrics
        run: |
          python scripts/issues/calculate_metrics.py \
            --output metrics.json

      - name: Generate metrics visualizations
        run: |
          python scripts/issues/generate_visualizations.py \
            --metrics metrics.json \
            --output visualizations.html

      - name: Update dashboard
        run: |
          python scripts/issues/update_dashboard.py \
            --metrics metrics.json \
            --visualizations visualizations.html \
            --output dashboard-update.json

  report:
    name: Generate Report
    needs: [triage, stale, cleanup, metrics]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Issue Management Report"
            
            if [ -f "stale-report.md" ]; then
              echo "## Stale Issues"
              cat stale-report.md
            fi
            
            if [ -f "reference-report.md" ]; then
              echo "## Reference Updates"
              cat reference-report.md
            fi
            
            echo "## Issue Metrics"
            cat metrics.json | jq -r '.metrics[] | "- " + .'
            
            echo "## Recommendations"
            python scripts/issues/generate_recommendations.py \
              --metrics metrics.json \
              --output recommendations.md
            cat recommendations.md
          } > issue-management-report.md

      - name: Create summary issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('issue-management-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìä Issue Management Summary',
              body: report,
              labels: ['report', 'automated']
            });

      - name: Update metrics
        run: |
          {
            echo "issue_management_completion $(date +%s)"
            echo "open_issues $(cat metrics.json | jq '.open_issues')"
            echo "closed_issues $(cat metrics.json | jq '.closed_issues')"
            echo "average_resolution_time $(cat metrics.json | jq '.avg_resolution_time')"
          } > issue_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/issue_management \
            --data-binary "@issue_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Issue Management Complete"
          description: |
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Issues Found' || '‚úÖ Successful' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Issue Bot"
