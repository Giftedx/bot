name: Concurrency Testing

on:
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sunday
  workflow_dispatch: # Allow manual trigger
    inputs:
      test_type:
        description: "Type of concurrency test"
        required: true
        type: choice
        options:
          - all
          - parallel
          - race
          - deadlock
          - contention
      threads:
        description: "Number of concurrent threads"
        required: true
        type: number
        default: 10

jobs:
  prepare:
    name: Prepare Test Environment
    runs-on: ubuntu-latest
    outputs:
      test_id: ${{ steps.setup.outputs.test_id }}

    steps:
      - name: Generate test ID
        id: setup
        run: |
          echo "test_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest-xdist pytest-asyncio asyncio-concurrency

  parallel:
    name: Parallel Operation Tests
    needs: prepare
    if: github.event.inputs.test_type == 'parallel' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Test parallel commands
        run: |
          python scripts/concurrency/test_parallel_commands.py \
            --threads ${{ github.event.inputs.threads || 10 }} \
            --output parallel_results.json

      - name: Test concurrent requests
        run: |
          python scripts/concurrency/test_concurrent_requests.py \
            --threads ${{ github.event.inputs.threads || 10 }} \
            --output request_results.json

      - name: Generate parallel report
        run: |
          {
            echo "# Parallel Operation Report"
            echo "## Command Results"
            cat parallel_results.json | jq -r '.results[] | "- " + .'
            echo "## Request Results"
            cat request_results.json | jq -r '.results[] | "- " + .'
          } > parallel-report.md

  race:
    name: Race Condition Tests
    needs: prepare
    if: github.event.inputs.test_type == 'race' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Test shared resources
        run: |
          python scripts/concurrency/test_shared_resources.py \
            --threads ${{ github.event.inputs.threads || 10 }} \
            --output resource_results.json

      - name: Test state modifications
        run: |
          python scripts/concurrency/test_state_modifications.py \
            --threads ${{ github.event.inputs.threads || 10 }} \
            --output state_results.json

      - name: Generate race report
        run: |
          {
            echo "# Race Condition Report"
            echo "## Resource Access"
            cat resource_results.json | jq -r '.results[] | "- " + .'
            echo "## State Modifications"
            cat state_results.json | jq -r '.results[] | "- " + .'
          } > race-report.md

  deadlock:
    name: Deadlock Detection Tests
    needs: prepare
    if: github.event.inputs.test_type == 'deadlock' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Test resource locking
        run: |
          python scripts/concurrency/test_resource_locking.py \
            --threads ${{ github.event.inputs.threads || 10 }} \
            --output lock_results.json

      - name: Test circular dependencies
        run: |
          python scripts/concurrency/test_circular_deps.py \
            --threads ${{ github.event.inputs.threads || 10 }} \
            --output deps_results.json

      - name: Generate deadlock report
        run: |
          {
            echo "# Deadlock Detection Report"
            echo "## Resource Locking"
            cat lock_results.json | jq -r '.results[] | "- " + .'
            echo "## Circular Dependencies"
            cat deps_results.json | jq -r '.results[] | "- " + .'
          } > deadlock-report.md

  contention:
    name: Resource Contention Tests
    needs: prepare
    if: github.event.inputs.test_type == 'contention' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Test database contention
        run: |
          python scripts/concurrency/test_db_contention.py \
            --threads ${{ github.event.inputs.threads || 10 }} \
            --output db_results.json

      - name: Test cache contention
        run: |
          python scripts/concurrency/test_cache_contention.py \
            --threads ${{ github.event.inputs.threads || 10 }} \
            --output cache_results.json

      - name: Generate contention report
        run: |
          {
            echo "# Resource Contention Report"
            echo "## Database Contention"
            cat db_results.json | jq -r '.results[] | "- " + .'
            echo "## Cache Contention"
            cat cache_results.json | jq -r '.results[] | "- " + .'
          } > contention-report.md

  analyze:
    name: Analyze Results
    needs: [prepare, parallel, race, deadlock, contention]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze concurrency patterns
        run: |
          python scripts/concurrency/analyze_patterns.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output pattern_analysis.json

      - name: Analyze bottlenecks
        run: |
          python scripts/concurrency/analyze_bottlenecks.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output bottleneck_analysis.json

      - name: Generate analysis report
        run: |
          {
            echo "# Concurrency Analysis Report"
            echo "## Concurrency Patterns"
            cat pattern_analysis.json | jq -r '.patterns[] | "- " + .'
            echo "## Bottlenecks"
            cat bottleneck_analysis.json | jq -r '.bottlenecks[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs: [prepare, parallel, race, deadlock, contention, analyze]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Concurrency Test Report"
            echo "Test ID: ${{ needs.prepare.outputs.test_id }}"
            echo "Threads: ${{ github.event.inputs.threads || 10 }}"
            
            echo "## Parallel Operations"
            cat parallel-report.md
            
            echo "## Race Conditions"
            cat race-report.md
            
            echo "## Deadlock Detection"
            cat deadlock-report.md
            
            echo "## Resource Contention"
            cat contention-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/concurrency/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > concurrency-report.md

      - name: Create issue for failures
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('concurrency-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ”„ Concurrency Issues Detected',
              body: report,
              labels: ['concurrency', 'bug']
            });

      - name: Update metrics
        run: |
          {
            echo "concurrency_completion $(date +%s)"
            echo "concurrency_issues $(python scripts/concurrency/count_issues.py analysis-report.md)"
          } > concurrency_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/concurrency_testing \
            --data-binary "@concurrency_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Concurrency Tests Complete"
          description: |
            Test ID: ${{ needs.prepare.outputs.test_id }}
            Threads: ${{ github.event.inputs.threads || 10 }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Concurrency Bot"
