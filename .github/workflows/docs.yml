name: Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "**/*.md"
      - "**/*.rst"
      - "src/**/*.py"
      - ".github/workflows/docs.yml"
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * 1" # Weekly on Monday
  workflow_dispatch: # Allow manual trigger
    inputs:
      doc_type:
        description: "Type of documentation"
        required: true
        type: choice
        options:
          - all
          - api
          - guides
          - examples
          - reference

jobs:
  prepare:
    name: Prepare Documentation Environment
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.setup.outputs.build_id }}

    steps:
      - name: Generate build ID
        id: setup
        run: |
          echo "build_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints sphinx-markdown-builder mkdocs mkdocstrings

  api-docs:
    name: API Documentation
    needs: prepare
    if: github.event.inputs.doc_type == 'api' || github.event.inputs.doc_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Generate API docs
        run: |
          sphinx-apidoc -f -o docs/api src/
          sphinx-build -b html docs/api docs/_build/api

      - name: Validate API docs
        run: |
          python scripts/docs/validate_api_docs.py \
            --build-id ${{ needs.prepare.outputs.build_id }} \
            --output api_validation.json

      - name: Generate API report
        run: |
          {
            echo "# API Documentation Report"
            echo "## Coverage"
            cat api_validation.json | jq -r '.coverage[] | "- " + .'
            echo "## Issues"
            cat api_validation.json | jq -r '.issues[] | "- " + .'
          } > api-docs-report.md

  guides:
    name: User Guides
    needs: prepare
    if: github.event.inputs.doc_type == 'guides' || github.event.inputs.doc_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Build user guides
        run: |
          mkdocs build --site-dir docs/_build/guides

      - name: Validate guides
        run: |
          python scripts/docs/validate_guides.py \
            --build-id ${{ needs.prepare.outputs.build_id }} \
            --output guide_validation.json

      - name: Generate guides report
        run: |
          {
            echo "# User Guides Report"
            echo "## Structure"
            cat guide_validation.json | jq -r '.structure[] | "- " + .'
            echo "## Content"
            cat guide_validation.json | jq -r '.content[] | "- " + .'
          } > guides-report.md

  examples:
    name: Code Examples
    needs: prepare
    if: github.event.inputs.doc_type == 'examples' || github.event.inputs.doc_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Build examples
        run: |
          python scripts/docs/build_examples.py \
            --build-id ${{ needs.prepare.outputs.build_id }} \
            --output examples_build.json

      - name: Validate examples
        run: |
          python scripts/docs/validate_examples.py \
            --build-id ${{ needs.prepare.outputs.build_id }} \
            --output example_validation.json

      - name: Generate examples report
        run: |
          {
            echo "# Code Examples Report"
            echo "## Examples Built"
            cat examples_build.json | jq -r '.examples[] | "- " + .'
            echo "## Validation Results"
            cat example_validation.json | jq -r '.results[] | "- " + .'
          } > examples-report.md

  reference:
    name: Reference Documentation
    needs: prepare
    if: github.event.inputs.doc_type == 'reference' || github.event.inputs.doc_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Build reference docs
        run: |
          sphinx-build -b html docs/reference docs/_build/reference

      - name: Validate reference
        run: |
          python scripts/docs/validate_reference.py \
            --build-id ${{ needs.prepare.outputs.build_id }} \
            --output reference_validation.json

      - name: Generate reference report
        run: |
          {
            echo "# Reference Documentation Report"
            echo "## Completeness"
            cat reference_validation.json | jq -r '.completeness[] | "- " + .'
            echo "## Accuracy"
            cat reference_validation.json | jq -r '.accuracy[] | "- " + .'
          } > reference-report.md

  validate:
    name: Validate Documentation
    needs: [prepare, api-docs, guides, examples, reference]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check links
        run: |
          python scripts/docs/check_links.py \
            --build-id ${{ needs.prepare.outputs.build_id }} \
            --output link_check.json

      - name: Check spelling
        run: |
          python scripts/docs/check_spelling.py \
            --build-id ${{ needs.prepare.outputs.build_id }} \
            --output spelling_check.json

      - name: Generate validation report
        run: |
          {
            echo "# Documentation Validation Report"
            echo "## Link Check"
            cat link_check.json | jq -r '.broken[] | "- " + .'
            echo "## Spelling Check"
            cat spelling_check.json | jq -r '.errors[] | "- " + .'
          } > validation-report.md

  publish:
    name: Publish Documentation
    needs: [prepare, validate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.validate.result == 'success'

    steps:
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build
          commit_message: "docs: update documentation (${{ needs.prepare.outputs.build_id }})"

      - name: Generate publish report
        run: |
          {
            echo "# Documentation Publishing Report"
            echo "## Deployment Status"
            echo "- Build ID: ${{ needs.prepare.outputs.build_id }}"
            echo "- Target: GitHub Pages"
            echo "- Status: Published"
          } > publish-report.md

  report:
    name: Generate Report
    needs: [prepare, api-docs, guides, examples, reference, validate, publish]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Documentation Report"
            echo "Build ID: ${{ needs.prepare.outputs.build_id }}"
            
            echo "## API Documentation"
            cat api-docs-report.md
            
            echo "## User Guides"
            cat guides-report.md
            
            echo "## Code Examples"
            cat examples-report.md
            
            echo "## Reference Documentation"
            cat reference-report.md
            
            echo "## Validation"
            cat validation-report.md
            
            if [ -f "publish-report.md" ]; then
              echo "## Publishing"
              cat publish-report.md
            fi
            
            echo "## Recommendations"
            python scripts/docs/generate_recommendations.py \
              --reports "*.md" \
              --output recommendations.md
            cat recommendations.md
          } > documentation-report.md

      - name: Create documentation issue
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('documentation-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìö Documentation Issues Detected',
              body: report,
              labels: ['documentation', 'needs-review']
            });

      - name: Update metrics
        run: |
          {
            echo "documentation_build_completion $(date +%s)"
            echo "documentation_coverage $(python scripts/docs/calculate_coverage.py documentation-report.md)"
          } > documentation_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/documentation \
            --data-binary "@documentation_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Documentation Build Complete"
          description: |
            Build ID: ${{ needs.prepare.outputs.build_id }}
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Issues Found' || '‚úÖ Build Successful' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Documentation Bot"
