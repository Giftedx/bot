name: Recovery Testing

on:
  schedule:
    - cron: "0 0 * * 4" # Weekly on Thursday
  workflow_dispatch: # Allow manual trigger
    inputs:
      scenario_type:
        description: "Type of recovery scenario"
        required: true
        type: choice
        options:
          - all
          - crash
          - data-loss
          - network
          - state
      severity:
        description: "Scenario severity (1-5)"
        required: true
        type: number
        default: 3

jobs:
  prepare:
    name: Prepare Recovery Environment
    runs-on: ubuntu-latest
    outputs:
      test_id: ${{ steps.setup.outputs.test_id }}

    steps:
      - name: Generate test ID
        id: setup
        run: |
          echo "test_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest-timeout pytest-recovery fault-injection

  crash-recovery:
    name: Crash Recovery
    needs: prepare
    if: github.event.inputs.scenario_type == 'crash' || github.event.inputs.scenario_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Simulate process crashes
        run: |
          python scripts/recovery/simulate_crashes.py \
            --severity ${{ github.event.inputs.severity || 3 }} \
            --output crash_simulation.json

      - name: Test recovery procedures
        run: |
          python scripts/recovery/test_crash_recovery.py \
            --simulation crash_simulation.json \
            --output crash_recovery.json

      - name: Generate crash recovery report
        run: |
          {
            echo "# Crash Recovery Report"
            echo "## Crash Scenarios"
            cat crash_simulation.json | jq -r '.scenarios[] | "- " + .'
            echo "## Recovery Results"
            cat crash_recovery.json | jq -r '.results[] | "- " + .'
          } > crash-recovery-report.md

  data-recovery:
    name: Data Loss Recovery
    needs: prepare
    if: github.event.inputs.scenario_type == 'data-loss' || github.event.inputs.scenario_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Simulate data loss
        run: |
          python scripts/recovery/simulate_data_loss.py \
            --severity ${{ github.event.inputs.severity || 3 }} \
            --output data_loss.json

      - name: Test data recovery
        run: |
          python scripts/recovery/test_data_recovery.py \
            --simulation data_loss.json \
            --output data_recovery.json

      - name: Generate data recovery report
        run: |
          {
            echo "# Data Loss Recovery Report"
            echo "## Data Loss Scenarios"
            cat data_loss.json | jq -r '.scenarios[] | "- " + .'
            echo "## Recovery Results"
            cat data_recovery.json | jq -r '.results[] | "- " + .'
          } > data-recovery-report.md

  network-recovery:
    name: Network Recovery
    needs: prepare
    if: github.event.inputs.scenario_type == 'network' || github.event.inputs.scenario_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Simulate network failures
        run: |
          python scripts/recovery/simulate_network_failures.py \
            --severity ${{ github.event.inputs.severity || 3 }} \
            --output network_failures.json

      - name: Test network recovery
        run: |
          python scripts/recovery/test_network_recovery.py \
            --simulation network_failures.json \
            --output network_recovery.json

      - name: Generate network recovery report
        run: |
          {
            echo "# Network Recovery Report"
            echo "## Network Failure Scenarios"
            cat network_failures.json | jq -r '.scenarios[] | "- " + .'
            echo "## Recovery Results"
            cat network_recovery.json | jq -r '.results[] | "- " + .'
          } > network-recovery-report.md

  state-recovery:
    name: State Recovery
    needs: prepare
    if: github.event.inputs.scenario_type == 'state' || github.event.inputs.scenario_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Simulate state corruption
        run: |
          python scripts/recovery/simulate_state_corruption.py \
            --severity ${{ github.event.inputs.severity || 3 }} \
            --output state_corruption.json

      - name: Test state recovery
        run: |
          python scripts/recovery/test_state_recovery.py \
            --simulation state_corruption.json \
            --output state_recovery.json

      - name: Generate state recovery report
        run: |
          {
            echo "# State Recovery Report"
            echo "## State Corruption Scenarios"
            cat state_corruption.json | jq -r '.scenarios[] | "- " + .'
            echo "## Recovery Results"
            cat state_recovery.json | jq -r '.results[] | "- " + .'
          } > state-recovery-report.md

  analyze:
    name: Analyze Results
    needs:
      [prepare, crash-recovery, data-recovery, network-recovery, state-recovery]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze recovery times
        run: |
          python scripts/recovery/analyze_times.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output time_analysis.json

      - name: Analyze success rates
        run: |
          python scripts/recovery/analyze_success.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output success_analysis.json

      - name: Generate analysis report
        run: |
          {
            echo "# Recovery Analysis Report"
            echo "## Recovery Times"
            cat time_analysis.json | jq -r '.times[] | "- " + .'
            echo "## Success Rates"
            cat success_analysis.json | jq -r '.rates[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs:
      [
        prepare,
        crash-recovery,
        data-recovery,
        network-recovery,
        state-recovery,
        analyze,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Recovery Test Report"
            echo "Test ID: ${{ needs.prepare.outputs.test_id }}"
            
            echo "## Crash Recovery"
            cat crash-recovery-report.md
            
            echo "## Data Loss Recovery"
            cat data-recovery-report.md
            
            echo "## Network Recovery"
            cat network-recovery-report.md
            
            echo "## State Recovery"
            cat state-recovery-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/recovery/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > recovery-report.md

      - name: Create issue for failures
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('recovery-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ”„ Recovery Test Failures',
              body: report,
              labels: ['recovery', 'reliability']
            });

      - name: Update metrics
        run: |
          {
            echo "recovery_completion $(date +%s)"
            echo "recovery_success_rate $(python scripts/recovery/calculate_rate.py success_analysis.json)"
          } > recovery_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/recovery_testing \
            --data-binary "@recovery_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Recovery Tests Complete"
          description: |
            Test ID: ${{ needs.prepare.outputs.test_id }}
            Severity: ${{ github.event.inputs.severity || 3 }}/5

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Recovery Bot"
