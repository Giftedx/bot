name: Compliance Testing

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "docs/**"
      - ".github/workflows/compliance.yml"
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 0 * * 4" # Weekly on Thursday
  workflow_dispatch: # Allow manual trigger
    inputs:
      compliance_type:
        description: "Type of compliance to check"
        required: true
        type: choice
        options:
          - all
          - privacy
          - security
          - licensing
          - standards

jobs:
  privacy-compliance:
    name: Privacy Compliance
    if: github.event.inputs.compliance_type == 'privacy' || github.event.inputs.compliance_type == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install privacy-audit-toolkit gdpr-checker pii-detector

      - name: Check for PII handling
        run: |
          python scripts/compliance/check_pii.py \
            --src-dir src/ \
            --output pii_report.json

      - name: Verify GDPR compliance
        run: |
          python scripts/compliance/check_gdpr.py \
            --config .gdpr-config.yml \
            --output gdpr_report.json

      - name: Check data retention
        run: |
          python scripts/compliance/check_retention.py \
            --output retention_report.json

      - name: Generate privacy report
        run: |
          {
            echo "# Privacy Compliance Report"
            echo "## PII Handling"
            cat pii_report.json | jq -r '.findings[] | "- " + .'
            echo "## GDPR Compliance"
            cat gdpr_report.json | jq -r '.issues[] | "- " + .'
            echo "## Data Retention"
            cat retention_report.json | jq -r '.issues[] | "- " + .'
          } > privacy-report.md

  security-compliance:
    name: Security Compliance
    if: github.event.inputs.compliance_type == 'security' || github.event.inputs.compliance_type == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Check security headers
        run: |
          python scripts/compliance/check_security_headers.py \
            --output headers_report.json

      - name: Verify authentication methods
        run: |
          python scripts/compliance/check_auth_methods.py \
            --output auth_report.json

      - name: Check encryption standards
        run: |
          python scripts/compliance/check_encryption.py \
            --output encryption_report.json

      - name: Generate security report
        run: |
          {
            echo "# Security Compliance Report"
            echo "## Security Headers"
            cat headers_report.json | jq -r '.findings[] | "- " + .'
            echo "## Authentication"
            cat auth_report.json | jq -r '.issues[] | "- " + .'
            echo "## Encryption"
            cat encryption_report.json | jq -r '.issues[] | "- " + .'
          } > security-report.md

  license-compliance:
    name: License Compliance
    if: github.event.inputs.compliance_type == 'licensing' || github.event.inputs.compliance_type == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Check dependencies licenses
        run: |
          pip-licenses --format=json > license_report.json

      - name: Verify license compatibility
        run: |
          python scripts/compliance/check_license_compatibility.py \
            --licenses license_report.json \
            --output compatibility_report.json

      - name: Check license headers
        run: |
          python scripts/compliance/check_license_headers.py \
            --src-dir src/ \
            --output headers_report.json

      - name: Generate license report
        run: |
          {
            echo "# License Compliance Report"
            echo "## Dependencies"
            cat license_report.json | jq -r '.[] | "- " + .Name + ": " + .License'
            echo "## Compatibility"
            cat compatibility_report.json | jq -r '.issues[] | "- " + .'
            echo "## Headers"
            cat headers_report.json | jq -r '.missing[] | "- " + .'
          } > license-report.md

  standards-compliance:
    name: Standards Compliance
    if: github.event.inputs.compliance_type == 'standards' || github.event.inputs.compliance_type == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Check code style
        run: |
          python scripts/compliance/check_code_style.py \
            --src-dir src/ \
            --standard pep8 \
            --output style_report.json

      - name: Verify documentation standards
        run: |
          python scripts/compliance/check_doc_standards.py \
            --docs-dir docs/ \
            --output docs_report.json

      - name: Check API standards
        run: |
          python scripts/compliance/check_api_standards.py \
            --api-dir src/api/ \
            --output api_report.json

      - name: Generate standards report
        run: |
          {
            echo "# Standards Compliance Report"
            echo "## Code Style"
            cat style_report.json | jq -r '.violations[] | "- " + .'
            echo "## Documentation"
            cat docs_report.json | jq -r '.issues[] | "- " + .'
            echo "## API"
            cat api_report.json | jq -r '.issues[] | "- " + .'
          } > standards-report.md

  report:
    name: Generate Report
    needs:
      [
        privacy-compliance,
        security-compliance,
        license-compliance,
        standards-compliance,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Compliance Test Report"
            
            echo "## Privacy Compliance"
            cat privacy-report.md
            
            echo "## Security Compliance"
            cat security-report.md
            
            echo "## License Compliance"
            cat license-report.md
            
            echo "## Standards Compliance"
            cat standards-report.md
          } > compliance-report.md

      - name: Create issue for violations
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚖️ Compliance Issues Detected',
              body: report,
              labels: ['compliance', 'high-priority']
            });

      - name: Update metrics
        run: |
          {
            echo "compliance_tests_total $(date +%s)"
            echo "compliance_violations $(echo '${{ needs.*.result }}' | grep -c failure || true)"
          } > compliance_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/compliance_testing \
            --data-binary "@compliance_metrics.txt"

      - name: Notify status
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Compliance Tests Complete"
          description: |
            Status: ${{ contains(needs.*.result, 'failure') && '❌ Violations Found' || '✅ All Tests Passed' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Compliance Bot"
