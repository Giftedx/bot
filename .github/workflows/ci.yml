name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual trigger
    inputs:
      skip_tests:
        description: "Skip test execution"
        required: true
        type: boolean
        default: false
      debug_enabled:
        description: "Enable debug mode"
        required: true
        type: boolean
        default: false

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Check formatting
        run: |
          black --check src/ tests/
          isort --check-only src/ tests/

      - name: Lint code
        run: |
          flake8 src/ tests/ --count --statistics
          pylint src/ tests/ --exit-zero

      - name: Check types
        run: |
          mypy src/ tests/

      - name: Generate validation report
        if: always()
        run: |
          {
            echo "# Code Validation Report"
            echo "## Formatting Checks"
            echo "- Black: ${{ steps.black.outcome }}"
            echo "- isort: ${{ steps.isort.outcome }}"
            echo "## Linting"
            echo "- Flake8: ${{ steps.flake8.outcome }}"
            echo "- Pylint: ${{ steps.pylint.outcome }}"
            echo "## Type Checking"
            echo "- MyPy: ${{ steps.mypy.outcome }}"
          } > validation-report.md

  test:
    name: Run Tests
    needs: validate
    if: |
      needs.validate.result == 'success' && 
      (github.event.inputs.skip_tests != 'true' || github.event_name != 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            -v \
            --cov=src \
            --cov-report=xml \
            --junitxml=test-results.xml

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            -v \
            --cov=src \
            --cov-append \
            --junitxml=integration-results.xml

      - name: Generate test report
        if: always()
        run: |
          {
            echo "# Test Report"
            echo "## Unit Tests"
            cat test-results.xml | xq '.'
            echo "## Integration Tests"
            cat integration-results.xml | xq '.'
            echo "## Coverage"
            cat coverage.xml | xq '.'
          } > test-report.md

  build:
    name: Build Package
    needs: [validate, test]
    if: |
      needs.validate.result == 'success' && 
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Build distribution
        run: |
          python -m build

      - name: Verify package
        run: |
          pip install dist/*.whl
          python -c "import bot; print(bot.__version__)"

      - name: Generate build report
        run: |
          {
            echo "# Build Report"
            echo "## Package Details"
            pip show bot
            echo "## Distribution Files"
            ls -l dist/
          } > build-report.md

  docker:
    name: Build Docker Image
    needs: [validate, test]
    if: |
      needs.validate.result == 'success' && 
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test image
        run: |
          docker run --rm bot:latest python -c "import bot; print(bot.__version__)"

      - name: Generate Docker report
        run: |
          {
            echo "# Docker Report"
            echo "## Image Details"
            docker images bot:latest --format "{{.Repository}}:{{.Tag}} - {{.Size}}"
            echo "## Test Results"
            docker run --rm bot:latest python -m pytest --version
          } > docker-report.md

  analyze:
    name: Analyze Results
    needs: [validate, test, build, docker]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze reports
        run: |
          python scripts/ci/analyze_reports.py \
            --validation validation-report.md \
            --test test-report.md \
            --build build-report.md \
            --docker docker-report.md \
            --output analysis.json

      - name: Generate final report
        run: |
          {
            echo "# CI Report"
            echo "## Validation"
            cat validation-report.md
            echo "## Tests"
            cat test-report.md
            echo "## Build"
            cat build-report.md
            echo "## Docker"
            cat docker-report.md
            echo "## Analysis"
            cat analysis.json | jq -r '.summary[]'
          } > ci-report.md

      - name: Create issue for failures
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ci-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ CI Pipeline Failures',
              body: report,
              labels: ['ci-failure', 'bug']
            });

      - name: Update metrics
        run: |
          {
            echo "ci_completion $(date +%s)"
            echo "ci_success ${{ !contains(needs.*.result, 'failure') }}"
          } > ci_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/ci \
            --data-binary "@ci_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "CI Pipeline Complete"
          description: |
            Status: ${{ contains(needs.*.result, 'failure') && '❌ Pipeline Failed' || '✅ Pipeline Passed' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "CI Bot"

  debug:
    name: Debug Information
    runs-on: ubuntu-latest
    if: github.event.inputs.debug_enabled == 'true'

    steps:
      - name: Collect debug info
        run: |
          {
            echo "# Debug Information"
            echo "## Environment"
            env | sort
            echo "## Python"
            python --version
            pip list
            echo "## System"
            uname -a
            free -h
            df -h
          } > debug-info.md

      - name: Upload debug info
        uses: actions/upload-artifact@v3
        with:
          name: debug-info
          path: debug-info.md
