name: Database Management

on:
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sunday
  workflow_dispatch: # Allow manual trigger
    inputs:
      operation_type:
        description: "Type of database operation"
        required: true
        type: choice
        options:
          - all
          - maintenance
          - optimization
          - cleanup
          - verification
      dry_run:
        description: "Dry run (no actual changes)"
        required: true
        type: boolean
        default: true

jobs:
  prepare:
    name: Prepare Database Environment
    runs-on: ubuntu-latest
    outputs:
      operation_id: ${{ steps.setup.outputs.operation_id }}

    steps:
      - name: Generate operation ID
        id: setup
        run: |
          echo "operation_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install alembic sqlalchemy psycopg2-binary redis-tools

  maintenance:
    name: Database Maintenance
    needs: prepare
    if: github.event.inputs.operation_type == 'maintenance' || github.event.inputs.operation_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Run VACUUM
        run: |
          python scripts/database/vacuum_db.py \
            --dry-run ${{ github.event.inputs.dry_run || true }} \
            --output vacuum_results.json

      - name: Update statistics
        run: |
          python scripts/database/update_stats.py \
            --dry-run ${{ github.event.inputs.dry_run || true }} \
            --output stats_results.json

      - name: Generate maintenance report
        run: |
          {
            echo "# Database Maintenance Report"
            echo "## VACUUM Results"
            cat vacuum_results.json | jq -r '.results[] | "- " + .'
            echo "## Statistics Update"
            cat stats_results.json | jq -r '.results[] | "- " + .'
          } > maintenance-report.md

  optimization:
    name: Database Optimization
    needs: prepare
    if: github.event.inputs.operation_type == 'optimization' || github.event.inputs.operation_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Optimize indexes
        run: |
          python scripts/database/optimize_indexes.py \
            --dry-run ${{ github.event.inputs.dry_run || true }} \
            --output index_results.json

      - name: Optimize queries
        run: |
          python scripts/database/optimize_queries.py \
            --dry-run ${{ github.event.inputs.dry_run || true }} \
            --output query_results.json

      - name: Generate optimization report
        run: |
          {
            echo "# Database Optimization Report"
            echo "## Index Optimization"
            cat index_results.json | jq -r '.results[] | "- " + .'
            echo "## Query Optimization"
            cat query_results.json | jq -r '.results[] | "- " + .'
          } > optimization-report.md

  cleanup:
    name: Database Cleanup
    needs: prepare
    if: github.event.inputs.operation_type == 'cleanup' || github.event.inputs.operation_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Clean old data
        run: |
          python scripts/database/clean_old_data.py \
            --dry-run ${{ github.event.inputs.dry_run || true }} \
            --output cleanup_results.json

      - name: Remove duplicates
        run: |
          python scripts/database/remove_duplicates.py \
            --dry-run ${{ github.event.inputs.dry_run || true }} \
            --output duplicate_results.json

      - name: Generate cleanup report
        run: |
          {
            echo "# Database Cleanup Report"
            echo "## Old Data Cleanup"
            cat cleanup_results.json | jq -r '.results[] | "- " + .'
            echo "## Duplicate Removal"
            cat duplicate_results.json | jq -r '.results[] | "- " + .'
          } > cleanup-report.md

  verification:
    name: Database Verification
    needs: prepare
    if: github.event.inputs.operation_type == 'verification' || github.event.inputs.operation_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Verify integrity
        run: |
          python scripts/database/verify_integrity.py \
            --output integrity_results.json

      - name: Check constraints
        run: |
          python scripts/database/check_constraints.py \
            --output constraint_results.json

      - name: Generate verification report
        run: |
          {
            echo "# Database Verification Report"
            echo "## Integrity Check"
            cat integrity_results.json | jq -r '.results[] | "- " + .'
            echo "## Constraint Check"
            cat constraint_results.json | jq -r '.results[] | "- " + .'
          } > verification-report.md

  analyze:
    name: Analyze Results
    needs: [prepare, maintenance, optimization, cleanup, verification]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze performance impact
        run: |
          python scripts/database/analyze_performance.py \
            --operation-id ${{ needs.prepare.outputs.operation_id }} \
            --output performance_analysis.json

      - name: Calculate space savings
        run: |
          python scripts/database/calculate_savings.py \
            --operation-id ${{ needs.prepare.outputs.operation_id }} \
            --output space_analysis.json

      - name: Generate analysis report
        run: |
          {
            echo "# Database Analysis Report"
            echo "## Performance Impact"
            cat performance_analysis.json | jq -r '.impact[] | "- " + .'
            echo "## Space Savings"
            cat space_analysis.json | jq -r '.savings[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs: [prepare, maintenance, optimization, cleanup, verification, analyze]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Database Management Report"
            echo "Operation ID: ${{ needs.prepare.outputs.operation_id }}"
            echo "Mode: ${{ github.event.inputs.dry_run && 'Dry Run' || 'Live Run' }}"
            
            echo "## Maintenance"
            cat maintenance-report.md
            
            echo "## Optimization"
            cat optimization-report.md
            
            echo "## Cleanup"
            cat cleanup-report.md
            
            echo "## Verification"
            cat verification-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/database/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > database-report.md

      - name: Create issue for problems
        if: contains(needs.*.result, 'failure') || contains(steps.*.outputs.has_issues, 'true')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('database-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üóÑÔ∏è Database Issues Detected',
              body: report,
              labels: ['database', 'needs-attention']
            });

      - name: Update metrics
        run: |
          {
            echo "database_operation_completion $(date +%s)"
            echo "database_operation_success ${{ !contains(needs.*.result, 'failure') }}"
            echo "space_saved $(python scripts/database/get_space_saved.py space_analysis.json)"
          } > database_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/database_management \
            --data-binary "@database_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Database Management Complete"
          description: |
            Operation ID: ${{ needs.prepare.outputs.operation_id }}
            Mode: ${{ github.event.inputs.dry_run && 'Dry Run' || 'Live Run' }}
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Issues Found' || '‚úÖ Successful' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Database Bot"
