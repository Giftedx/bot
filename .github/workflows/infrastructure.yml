name: Infrastructure Testing

on:
  push:
    branches: [main, develop]
    paths:
      - "deploy/**"
      - "terraform/**"
      - "kubernetes/**"
      - "docker-compose*.yml"
      - ".github/workflows/infrastructure.yml"
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sunday
  workflow_dispatch: # Allow manual trigger
    inputs:
      test_scope:
        description: "Infrastructure test scope"
        required: true
        type: choice
        options:
          - all
          - docker
          - kubernetes
          - terraform
          - networking

jobs:
  docker-test:
    name: Docker Validation
    if: github.event.inputs.test_scope == 'docker' || github.event.inputs.test_scope == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Dockerfile build
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file Dockerfile \
            --tag test-build \
            .

      - name: Run container structure tests
        uses: GoogleContainerTools/container-structure-test@v1
        with:
          image: test-build
          config: .container-structure-test.yaml

      - name: Test Docker Compose
        run: |
          docker-compose config
          docker-compose up -d
          docker-compose ps
          sleep 10
          docker-compose logs
          docker-compose down

      - name: Generate Docker report
        run: |
          {
            echo "# Docker Infrastructure Test Report"
            echo "## Build Results"
            docker images test-build --format "{{.Repository}}:{{.Tag}} - {{.Size}}"
            
            echo "## Container Tests"
            cat container-test-results.json
            
            echo "## Compose Validation"
            docker-compose config
          } > docker-report.md

  kubernetes-test:
    name: Kubernetes Validation
    if: github.event.inputs.test_scope == 'kubernetes' || github.event.inputs.test_scope == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Set up KinD cluster
        uses: engineerd/setup-kind@v0.5.0

      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin

      - name: Validate Kubernetes manifests
        run: |
          kubeval --strict kubernetes/**/*.yaml > kubeval-results.txt

      - name: Run configuration tests
        run: |
          kind create cluster
          kubectl apply -f kubernetes/
          kubectl get all -A
          kubectl wait --for=condition=ready pod -l app=bot --timeout=60s
          kubectl logs -l app=bot

      - name: Generate Kubernetes report
        run: |
          {
            echo "# Kubernetes Infrastructure Test Report"
            echo "## Manifest Validation"
            cat kubeval-results.txt
            
            echo "## Cluster Status"
            kubectl get all -A
            
            echo "## Pod Logs"
            kubectl logs -l app=bot
          } > kubernetes-report.md

  terraform-test:
    name: Terraform Validation
    if: github.event.inputs.test_scope == 'terraform' || github.event.inputs.test_scope == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        run: |
          cd terraform/
          terraform init

      - name: Validate Terraform configuration
        run: |
          cd terraform/
          terraform validate

      - name: Run tflint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Run checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform

      - name: Generate Terraform report
        run: |
          {
            echo "# Terraform Infrastructure Test Report"
            echo "## Validation Results"
            cd terraform/
            terraform validate
            
            echo "## Lint Results"
            tflint --format json
            
            echo "## Security Scan"
            cat checkov-report.json
          } > terraform-report.md

  network-test:
    name: Network Validation
    if: github.event.inputs.test_scope == 'networking' || github.event.inputs.test_scope == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Test network configuration
        run: |
          docker network ls
          docker network inspect bridge
          netstat -tulpn

      - name: Test service connectivity
        run: |
          docker-compose up -d
          curl -f http://localhost:8080/health || true
          curl -f http://localhost:6379 || true
          docker-compose down

      - name: Generate network report
        run: |
          {
            echo "# Network Infrastructure Test Report"
            echo "## Network Configuration"
            docker network ls
            
            echo "## Service Connectivity"
            netstat -tulpn
            
            echo "## Health Checks"
            curl -f http://localhost:8080/health || true
          } > network-report.md

  report:
    name: Generate Report
    needs: [docker-test, kubernetes-test, terraform-test, network-test]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Infrastructure Test Report"
            
            echo "## Docker Infrastructure"
            cat docker-report.md
            
            echo "## Kubernetes Infrastructure"
            cat kubernetes-report.md
            
            echo "## Terraform Infrastructure"
            cat terraform-report.md
            
            echo "## Network Infrastructure"
            cat network-report.md
          } > infrastructure-report.md

      - name: Create issue for failures
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('infrastructure-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üèóÔ∏è Infrastructure Test Failures',
              body: report,
              labels: ['infrastructure', 'bug']
            });

      - name: Update metrics
        run: |
          {
            echo "infrastructure_tests_total $(date +%s)"
            echo "infrastructure_failures $(echo '${{ needs.*.result }}' | grep -c failure || true)"
          } > infrastructure_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/infrastructure_testing \
            --data-binary "@infrastructure_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Infrastructure Tests Complete"
          description: |
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Tests Failed' || '‚úÖ All Tests Passed' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Infrastructure Bot"
