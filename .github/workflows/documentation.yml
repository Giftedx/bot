name: Documentation Testing

on:
  push:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "**/*.md"
      - "**/*.rst"
      - ".github/workflows/documentation.yml"
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * 2" # Weekly on Tuesday
  workflow_dispatch: # Allow manual trigger
    inputs:
      doc_type:
        description: "Type of documentation check"
        required: true
        type: choice
        options:
          - all
          - content
          - links
          - style
          - api

jobs:
  prepare:
    name: Prepare Documentation Environment
    runs-on: ubuntu-latest
    outputs:
      check_id: ${{ steps.setup.outputs.check_id }}

    steps:
      - name: Generate check ID
        id: setup
        run: |
          echo "check_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install sphinx doc8 rstcheck vale proselint

  content-check:
    name: Content Validation
    needs: prepare
    if: github.event.inputs.doc_type == 'content' || github.event.inputs.doc_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Check spelling
        run: |
          python scripts/docs/check_spelling.py \
            --output spelling_results.json

      - name: Check grammar
        run: |
          python scripts/docs/check_grammar.py \
            --output grammar_results.json

      - name: Generate content report
        run: |
          {
            echo "# Content Validation Report"
            echo "## Spelling Issues"
            cat spelling_results.json | jq -r '.issues[] | "- " + .'
            echo "## Grammar Issues"
            cat grammar_results.json | jq -r '.issues[] | "- " + .'
          } > content-report.md

  link-check:
    name: Link Validation
    needs: prepare
    if: github.event.inputs.doc_type == 'links' || github.event.inputs.doc_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Check internal links
        run: |
          python scripts/docs/check_internal_links.py \
            --output internal_links.json

      - name: Check external links
        run: |
          python scripts/docs/check_external_links.py \
            --output external_links.json

      - name: Generate link report
        run: |
          {
            echo "# Link Validation Report"
            echo "## Internal Links"
            cat internal_links.json | jq -r '.issues[] | "- " + .'
            echo "## External Links"
            cat external_links.json | jq -r '.issues[] | "- " + .'
          } > link-report.md

  style-check:
    name: Style Validation
    needs: prepare
    if: github.event.inputs.doc_type == 'style' || github.event.inputs.doc_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Check formatting
        run: |
          python scripts/docs/check_formatting.py \
            --output formatting_results.json

      - name: Check consistency
        run: |
          python scripts/docs/check_consistency.py \
            --output consistency_results.json

      - name: Generate style report
        run: |
          {
            echo "# Style Validation Report"
            echo "## Formatting Issues"
            cat formatting_results.json | jq -r '.issues[] | "- " + .'
            echo "## Consistency Issues"
            cat consistency_results.json | jq -r '.issues[] | "- " + .'
          } > style-report.md

  api-check:
    name: API Documentation
    needs: prepare
    if: github.event.inputs.doc_type == 'api' || github.event.inputs.doc_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Check docstrings
        run: |
          python scripts/docs/check_docstrings.py \
            --output docstring_results.json

      - name: Check API examples
        run: |
          python scripts/docs/check_api_examples.py \
            --output example_results.json

      - name: Generate API report
        run: |
          {
            echo "# API Documentation Report"
            echo "## Docstring Issues"
            cat docstring_results.json | jq -r '.issues[] | "- " + .'
            echo "## Example Issues"
            cat example_results.json | jq -r '.issues[] | "- " + .'
          } > api-report.md

  analyze:
    name: Analyze Results
    needs: [prepare, content-check, link-check, style-check, api-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze documentation coverage
        run: |
          python scripts/docs/analyze_coverage.py \
            --check-id ${{ needs.prepare.outputs.check_id }} \
            --output coverage_analysis.json

      - name: Analyze quality metrics
        run: |
          python scripts/docs/analyze_quality.py \
            --check-id ${{ needs.prepare.outputs.check_id }} \
            --output quality_analysis.json

      - name: Generate analysis report
        run: |
          {
            echo "# Documentation Analysis Report"
            echo "## Coverage Analysis"
            cat coverage_analysis.json | jq -r '.coverage[] | "- " + .'
            echo "## Quality Metrics"
            cat quality_analysis.json | jq -r '.metrics[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs: [prepare, content-check, link-check, style-check, api-check, analyze]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Documentation Test Report"
            echo "Check ID: ${{ needs.prepare.outputs.check_id }}"
            
            echo "## Content Validation"
            cat content-report.md
            
            echo "## Link Validation"
            cat link-report.md
            
            echo "## Style Validation"
            cat style-report.md
            
            echo "## API Documentation"
            cat api-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/docs/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > documentation-report.md

      - name: Create issue for problems
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('documentation-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ“š Documentation Issues Detected',
              body: report,
              labels: ['documentation', 'needs-review']
            });

      - name: Update metrics
        run: |
          {
            echo "documentation_check_completion $(date +%s)"
            echo "documentation_issues $(python scripts/docs/count_issues.py documentation-report.md)"
          } > documentation_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/documentation_testing \
            --data-binary "@documentation_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Documentation Check Complete"
          description: |
            Check ID: ${{ needs.prepare.outputs.check_id }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Documentation Bot"
