name: Scalability Testing

on:
  schedule:
    - cron: "0 0 * * 5" # Weekly on Friday
  workflow_dispatch: # Allow manual trigger
    inputs:
      test_type:
        description: "Type of scalability test"
        required: true
        type: choice
        options:
          - all
          - load
          - capacity
          - elasticity
          - efficiency
      load_factor:
        description: "Load multiplication factor"
        required: true
        type: number
        default: 2

jobs:
  prepare:
    name: Prepare Test Environment
    runs-on: ubuntu-latest
    outputs:
      test_id: ${{ steps.setup.outputs.test_id }}

    steps:
      - name: Generate test ID
        id: setup
        run: |
          echo "test_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install locust k6 artillery pytest-benchmark

  load-scaling:
    name: Load Scaling Tests
    needs: prepare
    if: github.event.inputs.test_type == 'load' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Run gradual load increase
        run: |
          python scripts/scalability/test_gradual_load.py \
            --factor ${{ github.event.inputs.load_factor || 2 }} \
            --output gradual_load.json

      - name: Run sudden load spike
        run: |
          python scripts/scalability/test_load_spike.py \
            --factor ${{ github.event.inputs.load_factor || 2 }} \
            --output load_spike.json

      - name: Generate load scaling report
        run: |
          {
            echo "# Load Scaling Report"
            echo "## Gradual Load Test"
            cat gradual_load.json | jq -r '.results[] | "- " + .'
            echo "## Load Spike Test"
            cat load_spike.json | jq -r '.results[] | "- " + .'
          } > load-scaling-report.md

  capacity-scaling:
    name: Capacity Scaling Tests
    needs: prepare
    if: github.event.inputs.test_type == 'capacity' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Test user capacity
        run: |
          python scripts/scalability/test_user_capacity.py \
            --factor ${{ github.event.inputs.load_factor || 2 }} \
            --output user_capacity.json

      - name: Test data capacity
        run: |
          python scripts/scalability/test_data_capacity.py \
            --factor ${{ github.event.inputs.load_factor || 2 }} \
            --output data_capacity.json

      - name: Generate capacity scaling report
        run: |
          {
            echo "# Capacity Scaling Report"
            echo "## User Capacity Test"
            cat user_capacity.json | jq -r '.results[] | "- " + .'
            echo "## Data Capacity Test"
            cat data_capacity.json | jq -r '.results[] | "- " + .'
          } > capacity-scaling-report.md

  elasticity-scaling:
    name: Elasticity Tests
    needs: prepare
    if: github.event.inputs.test_type == 'elasticity' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Test scale up
        run: |
          python scripts/scalability/test_scale_up.py \
            --factor ${{ github.event.inputs.load_factor || 2 }} \
            --output scale_up.json

      - name: Test scale down
        run: |
          python scripts/scalability/test_scale_down.py \
            --factor ${{ github.event.inputs.load_factor || 2 }} \
            --output scale_down.json

      - name: Generate elasticity report
        run: |
          {
            echo "# Elasticity Report"
            echo "## Scale Up Test"
            cat scale_up.json | jq -r '.results[] | "- " + .'
            echo "## Scale Down Test"
            cat scale_down.json | jq -r '.results[] | "- " + .'
          } > elasticity-report.md

  efficiency-scaling:
    name: Efficiency Tests
    needs: prepare
    if: github.event.inputs.test_type == 'efficiency' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Test resource efficiency
        run: |
          python scripts/scalability/test_resource_efficiency.py \
            --factor ${{ github.event.inputs.load_factor || 2 }} \
            --output resource_efficiency.json

      - name: Test cost efficiency
        run: |
          python scripts/scalability/test_cost_efficiency.py \
            --factor ${{ github.event.inputs.load_factor || 2 }} \
            --output cost_efficiency.json

      - name: Generate efficiency report
        run: |
          {
            echo "# Efficiency Report"
            echo "## Resource Efficiency"
            cat resource_efficiency.json | jq -r '.results[] | "- " + .'
            echo "## Cost Efficiency"
            cat cost_efficiency.json | jq -r '.results[] | "- " + .'
          } > efficiency-report.md

  analyze:
    name: Analyze Results
    needs:
      [
        prepare,
        load-scaling,
        capacity-scaling,
        elasticity-scaling,
        efficiency-scaling,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze scaling patterns
        run: |
          python scripts/scalability/analyze_patterns.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output pattern_analysis.json

      - name: Analyze bottlenecks
        run: |
          python scripts/scalability/analyze_bottlenecks.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output bottleneck_analysis.json

      - name: Generate analysis report
        run: |
          {
            echo "# Scalability Analysis Report"
            echo "## Scaling Patterns"
            cat pattern_analysis.json | jq -r '.patterns[] | "- " + .'
            echo "## Bottlenecks"
            cat bottleneck_analysis.json | jq -r '.bottlenecks[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs:
      [
        prepare,
        load-scaling,
        capacity-scaling,
        elasticity-scaling,
        efficiency-scaling,
        analyze,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Scalability Test Report"
            echo "Test ID: ${{ needs.prepare.outputs.test_id }}"
            
            echo "## Load Scaling"
            cat load-scaling-report.md
            
            echo "## Capacity Scaling"
            cat capacity-scaling-report.md
            
            echo "## Elasticity"
            cat elasticity-report.md
            
            echo "## Efficiency"
            cat efficiency-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/scalability/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > scalability-report.md

      - name: Create issue for bottlenecks
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('scalability-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ“ˆ Scalability Issues Detected',
              body: report,
              labels: ['scalability', 'performance']
            });

      - name: Update metrics
        run: |
          {
            echo "scalability_completion $(date +%s)"
            echo "scaling_efficiency $(python scripts/scalability/calculate_efficiency.py analysis-report.md)"
          } > scalability_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/scalability_testing \
            --data-binary "@scalability_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Scalability Tests Complete"
          description: |
            Test ID: ${{ needs.prepare.outputs.test_id }}
            Load Factor: ${{ github.event.inputs.load_factor || 2 }}x

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Scalability Bot"
