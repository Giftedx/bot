name: Issue and PR Labeler

on:
  issues:
    types: [opened, edited, reopened]
  pull_request:
    types: [opened, edited, synchronize, reopened]
  workflow_dispatch: # Allow manual trigger
    inputs:
      label_type:
        description: "Type of labeling"
        required: true
        type: choice
        options:
          - all
          - issues
          - prs
          - sync
      dry_run:
        description: "Dry run (no actual changes)"
        required: true
        type: boolean
        default: true

jobs:
  prepare:
    name: Prepare Labeling Environment
    runs-on: ubuntu-latest
    outputs:
      task_id: ${{ steps.setup.outputs.task_id }}

    steps:
      - name: Generate task ID
        id: setup
        run: |
          echo "task_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

  issue-labels:
    name: Issue Labeling
    needs: prepare
    if: |
      github.event_name == 'issues' || 
      github.event.inputs.label_type == 'issues' || 
      github.event.inputs.label_type == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Analyze issue content
        run: |
          python scripts/labeler/analyze_issue.py \
            --issue ${{ github.event.issue.number }} \
            --output issue_analysis.json

      - name: Determine labels
        run: |
          python scripts/labeler/determine_labels.py \
            --analysis issue_analysis.json \
            --type issue \
            --output label_determination.json

      - name: Apply labels
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const labels = require('./label_determination.json').labels;
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: labels
            });

      - name: Generate issue label report
        run: |
          {
            echo "# Issue Label Report"
            echo "## Content Analysis"
            cat issue_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Determined Labels"
            cat label_determination.json | jq -r '.labels[] | "- " + .'
          } > issue-label-report.md

  pr-labels:
    name: PR Labeling
    needs: prepare
    if: |
      github.event_name == 'pull_request' || 
      github.event.inputs.label_type == 'prs' || 
      github.event.inputs.label_type == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Analyze PR content
        run: |
          python scripts/labeler/analyze_pr.py \
            --pr ${{ github.event.pull_request.number }} \
            --output pr_analysis.json

      - name: Analyze changes
        run: |
          python scripts/labeler/analyze_changes.py \
            --pr ${{ github.event.pull_request.number }} \
            --output change_analysis.json

      - name: Determine labels
        run: |
          python scripts/labeler/determine_labels.py \
            --analysis pr_analysis.json \
            --changes change_analysis.json \
            --type pr \
            --output label_determination.json

      - name: Apply labels
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const labels = require('./label_determination.json').labels;
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: labels
            });

      - name: Generate PR label report
        run: |
          {
            echo "# PR Label Report"
            echo "## Content Analysis"
            cat pr_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Change Analysis"
            cat change_analysis.json | jq -r '.changes[] | "- " + .'
            echo "## Determined Labels"
            cat label_determination.json | jq -r '.labels[] | "- " + .'
          } > pr-label-report.md

  sync-labels:
    name: Label Synchronization
    needs: prepare
    if: github.event.inputs.label_type == 'sync' || github.event.inputs.label_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Load label configuration
        run: |
          python scripts/labeler/load_config.py \
            --output label_config.json

      - name: Sync repository labels
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const config = require('./label_config.json');

            // Create or update labels
            for (const label of config.labels) {
              try {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
              } catch (error) {
                if (error.status === 422) {
                  await github.rest.issues.updateLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                }
              }
            }

      - name: Generate sync report
        run: |
          {
            echo "# Label Sync Report"
            echo "## Label Configuration"
            cat label_config.json | jq -r '.labels[] | "- " + .name + ": " + .description'
          } > sync-report.md

  verify:
    name: Verify Labels
    needs: [prepare, issue-labels, pr-labels, sync-labels]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Verify label application
        run: |
          python scripts/labeler/verify_labels.py \
            --task-id ${{ needs.prepare.outputs.task_id }} \
            --output verification.json

      - name: Generate verification report
        run: |
          {
            echo "# Label Verification Report"
            echo "## Verification Results"
            cat verification.json | jq -r '.verifications[] | "- " + .'
          } > verification-report.md

  report:
    name: Generate Report
    needs: [prepare, issue-labels, pr-labels, sync-labels, verify]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Labeling Report"
            echo "Task ID: ${{ needs.prepare.outputs.task_id }}"
            echo "Mode: ${{ github.event.inputs.dry_run && 'Dry Run' || 'Live Run' }}"
            
            if [ -f "issue-label-report.md" ]; then
              echo "## Issue Labels"
              cat issue-label-report.md
            fi
            
            if [ -f "pr-label-report.md" ]; then
              echo "## PR Labels"
              cat pr-label-report.md
            fi
            
            if [ -f "sync-report.md" ]; then
              echo "## Label Sync"
              cat sync-report.md
            fi
            
            echo "## Verification"
            cat verification-report.md
          } > labeling-report.md

      - name: Create labeling issue
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('labeling-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üè∑Ô∏è Labeling Issues Detected',
              body: report,
              labels: ['automation', 'needs-attention']
            });

      - name: Update metrics
        run: |
          {
            echo "labeling_completion $(date +%s)"
            echo "labels_applied $(python scripts/labeler/count_labels.py labeling-report.md)"
          } > labeling_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/labeling \
            --data-binary "@labeling_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Labeling Complete"
          description: |
            Task ID: ${{ needs.prepare.outputs.task_id }}
            Mode: ${{ github.event.inputs.dry_run && 'Dry Run' || 'Live Run' }}
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Issues Found' || '‚úÖ Successful' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Label Bot"
