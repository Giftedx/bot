name: Compatibility Testing

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - ".github/workflows/compatibility.yml"
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 0 * * 3" # Weekly on Wednesday
  workflow_dispatch: # Allow manual trigger
    inputs:
      test_scope:
        description: "Test scope"
        required: true
        type: choice
        options:
          - all
          - python-versions
          - os-platforms
          - discord-versions
          - dependencies

jobs:
  python-compatibility:
    name: Python Version Tests
    if: github.event.inputs.test_scope == 'python-versions' || github.event.inputs.test_scope == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          pytest tests/ \
            -v --log-cli-level=INFO \
            --junitxml=test-results-${{ matrix.python-version }}.xml

      - name: Generate report
        run: |
          {
            echo "# Python ${{ matrix.python-version }} Compatibility Report"
            echo "## Test Results"
            python scripts/parse_test_results.py \
              test-results-${{ matrix.python-version }}.xml
          } > python-${{ matrix.python-version }}-report.md

  platform-compatibility:
    name: Platform Tests
    if: github.event.inputs.test_scope == 'os-platforms' || github.event.inputs.test_scope == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          pytest tests/ \
            -v --log-cli-level=INFO \
            --junitxml=test-results-${{ matrix.os }}.xml

      - name: Generate report
        run: |
          {
            echo "# ${{ matrix.os }} Platform Compatibility Report"
            echo "## Test Results"
            python scripts/parse_test_results.py \
              test-results-${{ matrix.os }}.xml
          } > platform-${{ matrix.os }}-report.md

  discord-compatibility:
    name: Discord API Tests
    if: github.event.inputs.test_scope == 'discord-versions' || github.event.inputs.test_scope == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        discord-py-version: ["1.7.3", "2.0.1", "2.1.0"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "discord.py==${{ matrix.discord-py-version }}"
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Discord API tests
        env:
          DISCORD_TOKEN: ${{ secrets.TEST_DISCORD_TOKEN }}
        run: |
          pytest tests/discord/ \
            -v --log-cli-level=INFO \
            --junitxml=test-results-discord-${{ matrix.discord-py-version }}.xml

      - name: Generate report
        run: |
          {
            echo "# Discord.py ${{ matrix.discord-py-version }} Compatibility Report"
            echo "## Test Results"
            python scripts/parse_test_results.py \
              test-results-discord-${{ matrix.discord-py-version }}.xml
          } > discord-${{ matrix.discord-py-version }}-report.md

  dependency-compatibility:
    name: Dependency Tests
    if: github.event.inputs.test_scope == 'dependencies' || github.event.inputs.test_scope == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Test with minimum versions
        run: |
          pip install -r requirements-min.txt
          pytest tests/ \
            -v --log-cli-level=INFO \
            --junitxml=test-results-min.xml

      - name: Test with latest versions
        run: |
          pip install -r requirements.txt --upgrade
          pytest tests/ \
            -v --log-cli-level=INFO \
            --junitxml=test-results-latest.xml

      - name: Generate report
        run: |
          {
            echo "# Dependency Compatibility Report"
            echo "## Minimum Versions"
            python scripts/parse_test_results.py test-results-min.xml
            echo "## Latest Versions"
            python scripts/parse_test_results.py test-results-latest.xml
          } > dependency-report.md

  report:
    name: Generate Report
    needs:
      [
        python-compatibility,
        platform-compatibility,
        discord-compatibility,
        dependency-compatibility,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Compatibility Test Report"
            
            echo "## Python Version Compatibility"
            cat python-*-report.md
            
            echo "## Platform Compatibility"
            cat platform-*-report.md
            
            echo "## Discord API Compatibility"
            cat discord-*-report.md
            
            echo "## Dependency Compatibility"
            cat dependency-report.md
          } > compatibility-report.md

      - name: Create issue for failures
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compatibility-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîß Compatibility Issues Detected',
              body: report,
              labels: ['compatibility', 'bug']
            });

      - name: Update metrics
        run: |
          {
            echo "compatibility_tests_total $(date +%s)"
            echo "compatibility_failures $(echo '${{ needs.*.result }}' | grep -c failure || true)"
          } > compatibility_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/compatibility_testing \
            --data-binary "@compatibility_metrics.txt"

      - name: Notify status
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Compatibility Tests Complete"
          description: |
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Issues Found' || '‚úÖ All Tests Passed' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Compatibility Bot"
