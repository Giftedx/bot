name: Vulnerability Scanning

on:
  push:
    branches: [main, develop]
    paths:
      - "**.py"
      - "requirements*.txt"
      - "Dockerfile*"
      - ".github/workflows/vulnerability.yml"
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * 5" # Weekly on Friday
  workflow_dispatch: # Allow manual trigger
    inputs:
      scan_type:
        description: "Type of vulnerability scan"
        required: true
        type: choice
        options:
          - all
          - dependencies
          - code
          - container
          - secrets

jobs:
  dependency-scan:
    name: Dependency Vulnerabilities
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Run Safety check
        id: safety
        run: |
          pip install safety
          safety check -r requirements.txt -r requirements-dev.txt --json > safety_report.json

      - name: Run pip-audit
        id: pip-audit
        run: |
          pip install pip-audit
          pip-audit -r requirements.txt -r requirements-dev.txt --format json > pip_audit_report.json

      - name: Check dependencies with Snyk
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Generate dependency report
        run: |
          {
            echo "# Dependency Vulnerability Report"
            
            echo "## Safety Check Results"
            cat safety_report.json | jq -r '.[] | "- " + .package + ": " + .vulnerability'
            
            echo "## Pip-audit Results"
            cat pip_audit_report.json | jq -r '.[] | "- " + .name + ": " + .description'
            
            echo "## Snyk Results"
            cat snyk_report.json | jq -r '.vulnerabilities[] | "- " + .title'
          } > dependency-report.md

  code-scan:
    name: Code Vulnerabilities
    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit_report.json

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/python

      - name: Generate code scan report
        run: |
          {
            echo "# Code Vulnerability Report"
            
            echo "## Bandit Results"
            cat bandit_report.json | jq -r '.results[] | "- " + .issue_text'
            
            echo "## Semgrep Results"
            cat semgrep_report.json | jq -r '.results[] | "- " + .extra.message'
          } > code-scan-report.md

  container-scan:
    name: Container Vulnerabilities
    if: github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: "json"
          output: "trivy-results.json"
          severity: "CRITICAL,HIGH"

      - name: Run Dockle
        uses: goodwithtech/dockle-action@v1
        with:
          format: "json"
          output: "dockle-results.json"

      - name: Generate container scan report
        run: |
          {
            echo "# Container Vulnerability Report"
            
            echo "## Trivy Results"
            cat trivy-results.json | jq -r '.Results[] | .Vulnerabilities[] | "- " + .VulnerabilityID + ": " + .Title'
            
            echo "## Dockle Results"
            cat dockle-results.json | jq -r '.details[] | "- " + .code + ": " + .title'
          } > container-scan-report.md

  secret-scan:
    name: Secret Detection
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog-actions-scan@master
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: Generate secret scan report
        run: |
          {
            echo "# Secret Detection Report"
            
            echo "## Gitleaks Results"
            cat gitleaks-results.json | jq -r '.[] | "- " + .Description'
            
            echo "## TruffleHog Results"
            cat trufflehog-results.json | jq -r '.[] | "- Found in: " + .path'
          } > secret-scan-report.md

  report:
    name: Generate Report
    needs: [dependency-scan, code-scan, container-scan, secret-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Vulnerability Scan Report"
            
            echo "## Dependency Vulnerabilities"
            cat dependency-report.md
            
            echo "## Code Vulnerabilities"
            cat code-scan-report.md
            
            echo "## Container Vulnerabilities"
            cat container-scan-report.md
            
            echo "## Secret Detection"
            cat secret-scan-report.md
          } > vulnerability-report.md

      - name: Create issue for vulnerabilities
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('vulnerability-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Security Vulnerabilities Detected',
              body: report,
              labels: ['security', 'vulnerability', 'high-priority']
            });

      - name: Update metrics
        run: |
          {
            echo "vulnerability_scans_total $(date +%s)"
            echo "vulnerabilities_found $(grep -c "^- " vulnerability-report.md || true)"
          } > vulnerability_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/vulnerability_scanning \
            --data-binary "@vulnerability_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Vulnerability Scan Complete"
          description: |
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Vulnerabilities Found' || '‚úÖ No Vulnerabilities' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Security Bot"
