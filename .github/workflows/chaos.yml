name: Chaos Testing

on:
  schedule:
    - cron: "0 0 * * 5" # Weekly on Friday
  workflow_dispatch: # Allow manual trigger
    inputs:
      duration:
        description: "Test duration in minutes"
        required: true
        type: number
        default: 60
      intensity:
        description: "Chaos intensity (1-5)"
        required: true
        type: number
        default: 3
      target:
        description: "Target component"
        required: true
        type: choice
        options:
          - all
          - network
          - resources
          - dependencies
          - state

jobs:
  prepare:
    name: Prepare Chaos Environment
    runs-on: ubuntu-latest
    outputs:
      test_id: ${{ steps.setup.outputs.test_id }}

    steps:
      - name: Generate test ID
        id: setup
        run: |
          echo "test_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up monitoring
        run: |
          python scripts/chaos/setup_monitoring.py \
            --test-id ${{ steps.setup.outputs.test_id }} \
            --duration ${{ github.event.inputs.duration || 60 }}

  network-chaos:
    name: Network Chaos
    needs: prepare
    if: github.event.inputs.target == 'network' || github.event.inputs.target == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Install chaos tools
        run: |
          sudo apt-get update
          sudo apt-get install -y tc iproute2 toxiproxy-cli

      - name: Simulate network latency
        run: |
          python scripts/chaos/network_latency.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Simulate packet loss
        run: |
          python scripts/chaos/packet_loss.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Generate network report
        run: |
          {
            echo "# Network Chaos Report"
            echo "## Latency Tests"
            cat latency_results.json | jq -r '.events[] | "- " + .'
            echo "## Packet Loss Tests"
            cat packet_loss_results.json | jq -r '.events[] | "- " + .'
          } > network-report.md

  resource-chaos:
    name: Resource Chaos
    needs: prepare
    if: github.event.inputs.target == 'resources' || github.event.inputs.target == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Simulate CPU stress
        run: |
          python scripts/chaos/cpu_stress.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Simulate memory pressure
        run: |
          python scripts/chaos/memory_pressure.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Simulate disk stress
        run: |
          python scripts/chaos/disk_stress.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Generate resource report
        run: |
          {
            echo "# Resource Chaos Report"
            echo "## CPU Tests"
            cat cpu_results.json | jq -r '.events[] | "- " + .'
            echo "## Memory Tests"
            cat memory_results.json | jq -r '.events[] | "- " + .'
            echo "## Disk Tests"
            cat disk_results.json | jq -r '.events[] | "- " + .'
          } > resource-report.md

  dependency-chaos:
    name: Dependency Chaos
    needs: prepare
    if: github.event.inputs.target == 'dependencies' || github.event.inputs.target == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Simulate Redis failures
        run: |
          python scripts/chaos/redis_chaos.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Simulate API failures
        run: |
          python scripts/chaos/api_chaos.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Generate dependency report
        run: |
          {
            echo "# Dependency Chaos Report"
            echo "## Redis Tests"
            cat redis_results.json | jq -r '.events[] | "- " + .'
            echo "## API Tests"
            cat api_results.json | jq -r '.events[] | "- " + .'
          } > dependency-report.md

  state-chaos:
    name: State Chaos
    needs: prepare
    if: github.event.inputs.target == 'state' || github.event.inputs.target == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Simulate data corruption
        run: |
          python scripts/chaos/data_corruption.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Simulate state transitions
        run: |
          python scripts/chaos/state_transitions.py \
            --intensity ${{ github.event.inputs.intensity || 3 }} \
            --duration ${{ github.event.inputs.duration || 60 }}

      - name: Generate state report
        run: |
          {
            echo "# State Chaos Report"
            echo "## Data Corruption Tests"
            cat corruption_results.json | jq -r '.events[] | "- " + .'
            echo "## State Transition Tests"
            cat transition_results.json | jq -r '.events[] | "- " + .'
          } > state-report.md

  analyze:
    name: Analyze Results
    needs:
      [prepare, network-chaos, resource-chaos, dependency-chaos, state-chaos]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze system behavior
        run: |
          python scripts/chaos/analyze_behavior.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output behavior_analysis.json

      - name: Analyze recovery patterns
        run: |
          python scripts/chaos/analyze_recovery.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output recovery_analysis.json

      - name: Generate analysis report
        run: |
          {
            echo "# Chaos Analysis Report"
            echo "## System Behavior"
            cat behavior_analysis.json | jq -r '.findings[] | "- " + .'
            echo "## Recovery Patterns"
            cat recovery_analysis.json | jq -r '.patterns[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs:
      [
        prepare,
        network-chaos,
        resource-chaos,
        dependency-chaos,
        state-chaos,
        analyze,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Chaos Test Report"
            echo "Test ID: ${{ needs.prepare.outputs.test_id }}"
            
            echo "## Network Chaos"
            cat network-report.md
            
            echo "## Resource Chaos"
            cat resource-report.md
            
            echo "## Dependency Chaos"
            cat dependency-report.md
            
            echo "## State Chaos"
            cat state-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/chaos/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > chaos-report.md

      - name: Create issue for findings
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('chaos-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🌪️ Chaos Test Results',
              body: report,
              labels: ['chaos-engineering', 'reliability']
            });

      - name: Update metrics
        run: |
          {
            echo "chaos_test_completion $(date +%s)"
            echo "resilience_score $(python scripts/chaos/calculate_score.py analysis-report.md)"
          } > chaos_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/chaos_testing \
            --data-binary "@chaos_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Chaos Test Complete"
          description: |
            Test ID: ${{ needs.prepare.outputs.test_id }}
            Duration: ${{ github.event.inputs.duration || 60 }} minutes
            Intensity: ${{ github.event.inputs.intensity || 3 }}/5

            Check the workflow run for detailed results.
          color: "0x00ff00"
          username: "Chaos Bot"
