name: System Monitoring

on:
  schedule:
    - cron: "*/15 * * * *" # Every 15 minutes
  workflow_dispatch: # Allow manual trigger
    inputs:
      monitor_type:
        description: "Type of monitoring"
        required: true
        type: choice
        options:
          - all
          - health
          - performance
          - resources
          - logs
      duration:
        description: "Monitoring duration in minutes"
        required: true
        type: number
        default: 15

jobs:
  prepare:
    name: Prepare Monitoring Environment
    runs-on: ubuntu-latest
    outputs:
      monitor_id: ${{ steps.setup.outputs.monitor_id }}

    steps:
      - name: Generate monitor ID
        id: setup
        run: |
          echo "monitor_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install prometheus_client grafana_api psutil

  health-check:
    name: Health Monitoring
    needs: prepare
    if: github.event.inputs.monitor_type == 'health' || github.event.inputs.monitor_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Check service health
        run: |
          python scripts/monitoring/check_service_health.py \
            --duration ${{ github.event.inputs.duration || 15 }} \
            --output health_status.json

      - name: Check endpoint status
        run: |
          python scripts/monitoring/check_endpoints.py \
            --duration ${{ github.event.inputs.duration || 15 }} \
            --output endpoint_status.json

      - name: Generate health report
        run: |
          {
            echo "# Health Status Report"
            echo "## Service Health"
            cat health_status.json | jq -r '.status[] | "- " + .'
            echo "## Endpoint Status"
            cat endpoint_status.json | jq -r '.status[] | "- " + .'
          } > health-report.md

  performance-monitor:
    name: Performance Monitoring
    needs: prepare
    if: github.event.inputs.monitor_type == 'performance' || github.event.inputs.monitor_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Monitor response times
        run: |
          python scripts/monitoring/monitor_response_times.py \
            --duration ${{ github.event.inputs.duration || 15 }} \
            --output response_metrics.json

      - name: Monitor throughput
        run: |
          python scripts/monitoring/monitor_throughput.py \
            --duration ${{ github.event.inputs.duration || 15 }} \
            --output throughput_metrics.json

      - name: Generate performance report
        run: |
          {
            echo "# Performance Metrics Report"
            echo "## Response Times"
            cat response_metrics.json | jq -r '.metrics[] | "- " + .'
            echo "## Throughput"
            cat throughput_metrics.json | jq -r '.metrics[] | "- " + .'
          } > performance-report.md

  resource-monitor:
    name: Resource Monitoring
    needs: prepare
    if: github.event.inputs.monitor_type == 'resources' || github.event.inputs.monitor_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Monitor system resources
        run: |
          python scripts/monitoring/monitor_system_resources.py \
            --duration ${{ github.event.inputs.duration || 15 }} \
            --output system_metrics.json

      - name: Monitor database resources
        run: |
          python scripts/monitoring/monitor_database.py \
            --duration ${{ github.event.inputs.duration || 15 }} \
            --output database_metrics.json

      - name: Generate resource report
        run: |
          {
            echo "# Resource Usage Report"
            echo "## System Resources"
            cat system_metrics.json | jq -r '.metrics[] | "- " + .'
            echo "## Database Resources"
            cat database_metrics.json | jq -r '.metrics[] | "- " + .'
          } > resource-report.md

  log-monitor:
    name: Log Monitoring
    needs: prepare
    if: github.event.inputs.monitor_type == 'logs' || github.event.inputs.monitor_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Monitor application logs
        run: |
          python scripts/monitoring/monitor_app_logs.py \
            --duration ${{ github.event.inputs.duration || 15 }} \
            --output app_logs.json

      - name: Monitor error logs
        run: |
          python scripts/monitoring/monitor_error_logs.py \
            --duration ${{ github.event.inputs.duration || 15 }} \
            --output error_logs.json

      - name: Generate log report
        run: |
          {
            echo "# Log Analysis Report"
            echo "## Application Logs"
            cat app_logs.json | jq -r '.logs[] | "- " + .'
            echo "## Error Logs"
            cat error_logs.json | jq -r '.logs[] | "- " + .'
          } > log-report.md

  analyze:
    name: Analyze Metrics
    needs:
      [
        prepare,
        health-check,
        performance-monitor,
        resource-monitor,
        log-monitor,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze trends
        run: |
          python scripts/monitoring/analyze_trends.py \
            --monitor-id ${{ needs.prepare.outputs.monitor_id }} \
            --output trend_analysis.json

      - name: Detect anomalies
        run: |
          python scripts/monitoring/detect_anomalies.py \
            --monitor-id ${{ needs.prepare.outputs.monitor_id }} \
            --output anomaly_detection.json

      - name: Generate analysis report
        run: |
          {
            echo "# Monitoring Analysis Report"
            echo "## Trends"
            cat trend_analysis.json | jq -r '.trends[] | "- " + .'
            echo "## Anomalies"
            cat anomaly_detection.json | jq -r '.anomalies[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs:
      [
        prepare,
        health-check,
        performance-monitor,
        resource-monitor,
        log-monitor,
        analyze,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# System Monitoring Report"
            echo "Monitor ID: ${{ needs.prepare.outputs.monitor_id }}"
            echo "Duration: ${{ github.event.inputs.duration || 15 }} minutes"
            
            echo "## Health Status"
            cat health-report.md
            
            echo "## Performance Metrics"
            cat performance-report.md
            
            echo "## Resource Usage"
            cat resource-report.md
            
            echo "## Log Analysis"
            cat log-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/monitoring/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > monitoring-report.md

      - name: Create issue for alerts
        if: contains(needs.*.result, 'failure') || contains(steps.*.outputs.has_alerts, 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('monitoring-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ System Alerts Detected',
              body: report,
              labels: ['monitoring', 'alert']
            });

      - name: Update Prometheus metrics
        run: |
          {
            echo "monitoring_completion $(date +%s)"
            echo "alerts_triggered $(python scripts/monitoring/count_alerts.py analysis-report.md)"
          } > monitoring_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/monitoring \
            --data-binary "@monitoring_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "System Monitoring Complete"
          description: |
            Monitor ID: ${{ needs.prepare.outputs.monitor_id }}
            Duration: ${{ github.event.inputs.duration || 15 }} minutes

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Monitoring Bot"
