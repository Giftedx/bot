name: Version Management

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "CHANGELOG.md"
      - "version.txt"
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch: # Allow manual trigger
    inputs:
      version_type:
        description: "Type of version bump"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: "Is this a prerelease?"
        required: false
        type: boolean
        default: false

jobs:
  version:
    name: Update Version
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver gitpython conventional-changelog

      - name: Determine version bump
        id: bump
        if: github.event_name != 'workflow_dispatch'
        run: |
          # Analyze commit messages since last tag
          COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s")

          # Determine bump type based on conventional commits
          BUMP_TYPE="patch"  # Default to patch
          echo "$COMMITS" | while read -r commit; do
            if [[ $commit == "feat!"* ]] || [[ $commit == "fix!"* ]] || [[ $commit == "BREAKING"* ]]; then
              BUMP_TYPE="major"
              break
            elif [[ $commit == "feat:"* ]]; then
              BUMP_TYPE="minor"
            fi
          done

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(cat version.txt || echo "0.0.0")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new
        run: |
          CURRENT_VERSION="${{ steps.current.outputs.version }}"
          BUMP_TYPE="${{ github.event.inputs.version_type || steps.bump.outputs.bump_type }}"

          # Calculate new version using semver
          NEW_VERSION=$(python -c "
          import semver
          v = semver.VersionInfo.parse('${CURRENT_VERSION}')
          if '${BUMP_TYPE}' == 'major':
              print(v.bump_major())
          elif '${BUMP_TYPE}' == 'minor':
              print(v.bump_minor())
          else:
              print(v.bump_patch())
          ")

          # Add prerelease suffix if specified
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            NEW_VERSION="${NEW_VERSION}-beta.$(date +%Y%m%d%H%M%S)"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version files
        run: |
          # Update version.txt
          echo "${{ steps.new.outputs.version }}" > version.txt

          # Update Python package version
          sed -i "s/version = .*/version = \"${{ steps.new.outputs.version }}\"/" pyproject.toml

          # Update package.json if it exists
          if [ -f package.json ]; then
            sed -i "s/\"version\": .*/\"version\": \"${{ steps.new.outputs.version }}\",/" package.json
          fi

      - name: Generate changelog
        run: |
          conventional-changelog -p angular -i CHANGELOG.md -s

      - name: Create version PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): bump version to ${{ steps.new.outputs.version }}"
          title: "ðŸ”– Release version ${{ steps.new.outputs.version }}"
          body: |
            Automated version bump to ${{ steps.new.outputs.version }}

            ## Changes
            $(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s")
          branch: release/v${{ steps.new.outputs.version }}
          labels: release
          assignees: project-maintainer
          reviewers: release-team

      - name: Create git tag
        if: github.event.inputs.prerelease != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ steps.new.outputs.version }} -m "Release version ${{ steps.new.outputs.version }}"
          git push origin v${{ steps.new.outputs.version }}

      - name: Update development version
        if: github.ref == 'refs/heads/main' && github.event.inputs.prerelease != 'true'
        run: |
          git checkout develop
          git merge --no-ff main -m "chore: merge release v${{ steps.new.outputs.version }} into develop"
          echo "${{ steps.new.outputs.version }}-dev" > version.txt
          git add version.txt
          git commit -m "chore: bump version for development"
          git push origin develop

      - name: Update metrics
        run: |
          {
            echo "version_bump $(date +%s)"
            echo "version_number ${{ steps.new.outputs.version }}"
          } > version_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/versioning \
            --data-binary "@version_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Version Update"
          description: |
            New version: ${{ steps.new.outputs.version }}
            Type: ${{ github.event.inputs.version_type || steps.bump.outputs.bump_type }}

            A pull request has been created for this release.
          color: "0x00ff00"
          username: "Version Bot"
