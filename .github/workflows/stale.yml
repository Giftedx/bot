name: Stale Management

on:
  schedule:
    - cron: "0 0 * * *" # Daily at midnight
  workflow_dispatch: # Allow manual trigger
    inputs:
      stale_type:
        description: "Type of stale check"
        required: true
        type: choice
        options:
          - all
          - issues
          - prs
          - discussions
      dry_run:
        description: "Dry run (no actual changes)"
        required: true
        type: boolean
        default: true
      days_before_stale:
        description: "Days before marking as stale"
        required: true
        type: number
        default: 60
      days_before_close:
        description: "Days before closing stale items"
        required: true
        type: number
        default: 7

jobs:
  prepare:
    name: Prepare Stale Environment
    runs-on: ubuntu-latest
    outputs:
      task_id: ${{ steps.setup.outputs.task_id }}

    steps:
      - name: Generate task ID
        id: setup
        run: |
          echo "task_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

  issues:
    name: Stale Issues
    needs: prepare
    if: github.event.inputs.stale_type == 'issues' || github.event.inputs.stale_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Find stale issues
        run: |
          python scripts/stale/find_stale_issues.py \
            --days ${{ github.event.inputs.days_before_stale || 60 }} \
            --output stale_issues.json

      - name: Process stale issues
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const staleIssues = require('./stale_issues.json').issues;
            for (const issue of staleIssues) {
              // Add stale label and comment
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['stale']
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'This issue has been automatically marked as stale due to inactivity. It will be closed in 7 days if no further activity occurs.'
              });
            }

      - name: Close old stale issues
        if: github.event.inputs.dry_run != 'true'
        run: |
          python scripts/stale/close_stale_issues.py \
            --days ${{ github.event.inputs.days_before_close || 7 }} \
            --output closed_issues.json

      - name: Generate issue report
        run: |
          {
            echo "# Stale Issues Report"
            echo "## Newly Marked Stale"
            cat stale_issues.json | jq -r '.issues[] | "- #" + (.number | tostring) + ": " + .title'
            echo "## Closed Stale Issues"
            cat closed_issues.json | jq -r '.issues[] | "- #" + (.number | tostring) + ": " + .title'
          } > issue-report.md

  prs:
    name: Stale Pull Requests
    needs: prepare
    if: github.event.inputs.stale_type == 'prs' || github.event.inputs.stale_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Find stale PRs
        run: |
          python scripts/stale/find_stale_prs.py \
            --days ${{ github.event.inputs.days_before_stale || 60 }} \
            --output stale_prs.json

      - name: Process stale PRs
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const stalePRs = require('./stale_prs.json').prs;
            for (const pr of stalePRs) {
              // Add stale label and comment
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['stale']
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: 'This pull request has been automatically marked as stale due to inactivity. It will be closed in 7 days if no further activity occurs.'
              });
            }

      - name: Close old stale PRs
        if: github.event.inputs.dry_run != 'true'
        run: |
          python scripts/stale/close_stale_prs.py \
            --days ${{ github.event.inputs.days_before_close || 7 }} \
            --output closed_prs.json

      - name: Generate PR report
        run: |
          {
            echo "# Stale PRs Report"
            echo "## Newly Marked Stale"
            cat stale_prs.json | jq -r '.prs[] | "- #" + (.number | tostring) + ": " + .title'
            echo "## Closed Stale PRs"
            cat closed_prs.json | jq -r '.prs[] | "- #" + (.number | tostring) + ": " + .title'
          } > pr-report.md

  discussions:
    name: Stale Discussions
    needs: prepare
    if: github.event.inputs.stale_type == 'discussions' || github.event.inputs.stale_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Find stale discussions
        run: |
          python scripts/stale/find_stale_discussions.py \
            --days ${{ github.event.inputs.days_before_stale || 60 }} \
            --output stale_discussions.json

      - name: Process stale discussions
        if: github.event.inputs.dry_run != 'true'
        run: |
          python scripts/stale/process_stale_discussions.py \
            --discussions stale_discussions.json \
            --output processed_discussions.json

      - name: Generate discussion report
        run: |
          {
            echo "# Stale Discussions Report"
            echo "## Processed Discussions"
            cat processed_discussions.json | jq -r '.discussions[] | "- " + .title'
          } > discussion-report.md

  analyze:
    name: Analyze Results
    needs: [prepare, issues, prs, discussions]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze stale patterns
        run: |
          python scripts/stale/analyze_patterns.py \
            --task-id ${{ needs.prepare.outputs.task_id }} \
            --output pattern_analysis.json

      - name: Generate recommendations
        run: |
          python scripts/stale/generate_recommendations.py \
            --analysis pattern_analysis.json \
            --output recommendations.json

      - name: Generate analysis report
        run: |
          {
            echo "# Stale Analysis Report"
            echo "## Stale Patterns"
            cat pattern_analysis.json | jq -r '.patterns[] | "- " + .'
            echo "## Recommendations"
            cat recommendations.json | jq -r '.recommendations[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs: [prepare, issues, prs, discussions, analyze]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Stale Management Report"
            echo "Task ID: ${{ needs.prepare.outputs.task_id }}"
            echo "Mode: ${{ github.event.inputs.dry_run && 'Dry Run' || 'Live Run' }}"
            
            if [ -f "issue-report.md" ]; then
              echo "## Issues"
              cat issue-report.md
            fi
            
            if [ -f "pr-report.md" ]; then
              echo "## Pull Requests"
              cat pr-report.md
            fi
            
            if [ -f "discussion-report.md" ]; then
              echo "## Discussions"
              cat discussion-report.md
            fi
            
            echo "## Analysis"
            cat analysis-report.md
          } > stale-report.md

      - name: Create summary issue
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('stale-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⏰ Stale Items Report',
              body: report,
              labels: ['automation', 'housekeeping']
            });

      - name: Update metrics
        run: |
          {
            echo "stale_management_completion $(date +%s)"
            echo "items_marked_stale $(python scripts/stale/count_stale.py stale-report.md)"
            echo "items_closed $(python scripts/stale/count_closed.py stale-report.md)"
          } > stale_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/stale_management \
            --data-binary "@stale_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Stale Management Complete"
          description: |
            Task ID: ${{ needs.prepare.outputs.task_id }}
            Mode: ${{ github.event.inputs.dry_run && 'Dry Run' || 'Live Run' }}

            Check the workflow run for detailed results.
          color: "0x00ff00"
          username: "Stale Bot"
