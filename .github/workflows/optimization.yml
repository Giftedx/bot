name: Optimization Testing

on:
  schedule:
    - cron: "0 0 * * 3" # Weekly on Wednesday
  workflow_dispatch: # Allow manual trigger
    inputs:
      optimization_type:
        description: "Type of optimization"
        required: true
        type: choice
        options:
          - all
          - code
          - memory
          - database
          - network
      threshold:
        description: "Improvement threshold (%)"
        required: true
        type: number
        default: 10

jobs:
  prepare:
    name: Prepare Optimization Environment
    runs-on: ubuntu-latest
    outputs:
      test_id: ${{ steps.setup.outputs.test_id }}

    steps:
      - name: Generate test ID
        id: setup
        run: |
          echo "test_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install line_profiler memory_profiler py-spy scalene

  code-optimization:
    name: Code Optimization
    needs: prepare
    if: github.event.inputs.optimization_type == 'code' || github.event.inputs.optimization_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Profile code execution
        run: |
          python -m line_profiler scripts/optimization/profile_code.py \
            --output code_profile.json

      - name: Analyze hotspots
        run: |
          python scripts/optimization/analyze_hotspots.py \
            --profile code_profile.json \
            --output hotspots.json

      - name: Generate optimization suggestions
        run: |
          python scripts/optimization/suggest_optimizations.py \
            --hotspots hotspots.json \
            --output code_suggestions.json

      - name: Generate code optimization report
        run: |
          {
            echo "# Code Optimization Report"
            echo "## Performance Hotspots"
            cat hotspots.json | jq -r '.hotspots[] | "- " + .'
            echo "## Optimization Suggestions"
            cat code_suggestions.json | jq -r '.suggestions[] | "- " + .'
          } > code-optimization-report.md

  memory-optimization:
    name: Memory Optimization
    needs: prepare
    if: github.event.inputs.optimization_type == 'memory' || github.event.inputs.optimization_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Profile memory usage
        run: |
          python -m memory_profiler scripts/optimization/profile_memory.py \
            --output memory_profile.json

      - name: Analyze memory leaks
        run: |
          python scripts/optimization/analyze_memory.py \
            --profile memory_profile.json \
            --output memory_analysis.json

      - name: Generate memory optimization report
        run: |
          {
            echo "# Memory Optimization Report"
            echo "## Memory Usage Analysis"
            cat memory_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Optimization Opportunities"
            cat memory_analysis.json | jq -r '.opportunities[] | "- " + .'
          } > memory-optimization-report.md

  database-optimization:
    name: Database Optimization
    needs: prepare
    if: github.event.inputs.optimization_type == 'database' || github.event.inputs.optimization_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Analyze query performance
        run: |
          python scripts/optimization/analyze_queries.py \
            --output query_analysis.json

      - name: Optimize indexes
        run: |
          python scripts/optimization/optimize_indexes.py \
            --analysis query_analysis.json \
            --output index_optimization.json

      - name: Generate database optimization report
        run: |
          {
            echo "# Database Optimization Report"
            echo "## Query Performance Analysis"
            cat query_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Index Optimization Suggestions"
            cat index_optimization.json | jq -r '.suggestions[] | "- " + .'
          } > database-optimization-report.md

  network-optimization:
    name: Network Optimization
    needs: prepare
    if: github.event.inputs.optimization_type == 'network' || github.event.inputs.optimization_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Analyze network traffic
        run: |
          python scripts/optimization/analyze_traffic.py \
            --output traffic_analysis.json

      - name: Optimize protocols
        run: |
          python scripts/optimization/optimize_protocols.py \
            --analysis traffic_analysis.json \
            --output protocol_optimization.json

      - name: Generate network optimization report
        run: |
          {
            echo "# Network Optimization Report"
            echo "## Traffic Analysis"
            cat traffic_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Protocol Optimization Suggestions"
            cat protocol_optimization.json | jq -r '.suggestions[] | "- " + .'
          } > network-optimization-report.md

  analyze:
    name: Analyze Results
    needs:
      [
        prepare,
        code-optimization,
        memory-optimization,
        database-optimization,
        network-optimization,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Compare with baseline
        run: |
          python scripts/optimization/compare_baseline.py \
            --current "*.json" \
            --baseline baseline/optimization/ \
            --threshold ${{ github.event.inputs.threshold || 10 }} \
            --output comparison.json

      - name: Calculate improvements
        run: |
          python scripts/optimization/calculate_improvements.py \
            --comparison comparison.json \
            --output improvements.json

      - name: Generate analysis report
        run: |
          {
            echo "# Optimization Analysis Report"
            echo "## Performance Comparison"
            cat comparison.json | jq -r '.comparisons[] | "- " + .'
            echo "## Potential Improvements"
            cat improvements.json | jq -r '.improvements[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs:
      [
        prepare,
        code-optimization,
        memory-optimization,
        database-optimization,
        network-optimization,
        analyze,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Optimization Test Report"
            echo "Test ID: ${{ needs.prepare.outputs.test_id }}"
            
            echo "## Code Optimization"
            cat code-optimization-report.md
            
            echo "## Memory Optimization"
            cat memory-optimization-report.md
            
            echo "## Database Optimization"
            cat database-optimization-report.md
            
            echo "## Network Optimization"
            cat network-optimization-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Implementation Plan"
            python scripts/optimization/generate_plan.py \
              --analysis analysis-report.md \
              --output implementation_plan.md
            cat implementation_plan.md
          } > optimization-report.md

      - name: Create optimization PR
        if: github.event_name == 'schedule'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "perf: implement suggested optimizations"
          title: "âš¡ Performance Optimizations"
          body: |
            Automated performance optimization suggestions.
            Please review the changes and test thoroughly before merging.
          branch: optimization/automated-improvements
          labels: performance,optimization

      - name: Update metrics
        run: |
          {
            echo "optimization_completion $(date +%s)"
            echo "improvement_potential $(python scripts/optimization/calculate_potential.py improvements.json)"
          } > optimization_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/optimization_testing \
            --data-binary "@optimization_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Optimization Analysis Complete"
          description: |
            Test ID: ${{ needs.prepare.outputs.test_id }}
            Improvement Threshold: ${{ github.event.inputs.threshold || 10 }}%

            Check the workflow run for detailed results.
          color: "0x00ff00"
          username: "Optimization Bot"
