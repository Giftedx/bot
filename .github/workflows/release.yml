name: Release Management

on:
  push:
    branches: [main]
    paths-ignore:
      - "CHANGELOG.md"
      - "version.txt"
  workflow_dispatch: # Allow manual trigger
    inputs:
      release_type:
        description: "Type of release"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      prerelease:
        description: "Mark as prerelease"
        required: true
        type: boolean
        default: false
      draft:
        description: "Create as draft"
        required: true
        type: boolean
        default: true

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.setup.outputs.release_id }}
      version: ${{ steps.version.outputs.version }}
      previous_version: ${{ steps.version.outputs.previous_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release ID
        id: setup
        run: |
          echo "release_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Calculate version
        id: version
        run: |
          CURRENT_VERSION=$(cat version.txt || echo "0.0.0")
          echo "previous_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Determine release type from commit messages
            COMMITS=$(git log --format=%B "$(git describe --tags --abbrev=0)"..HEAD)
            if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
              RELEASE_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat"; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi
          fi

          # Calculate new version
          case "$RELEASE_TYPE" in
            major)
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
              ;;
            minor)
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
              ;;
            patch)
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
              ;;
            prerelease)
              NEW_VERSION="${CURRENT_VERSION}-beta.$(date +%Y%m%d%H%M%S)"
              ;;
          esac

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  validate:
    name: Validate Release
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: Run tests
        run: |
          python -m pytest tests/ -v

      - name: Check dependencies
        run: |
          python scripts/release/check_dependencies.py \
            --output dependency_check.json

      - name: Validate documentation
        run: |
          python scripts/release/validate_docs.py \
            --version ${{ needs.prepare.outputs.version }} \
            --output docs_validation.json

      - name: Generate validation report
        run: |
          {
            echo "# Release Validation Report"
            echo "## Test Results"
            cat test_results.xml | xq '.'
            echo "## Dependency Check"
            cat dependency_check.json | jq -r '.checks[] | "- " + .'
            echo "## Documentation Validation"
            cat docs_validation.json | jq -r '.validations[] | "- " + .'
          } > validation-report.md

  build:
    name: Build Release
    needs: [prepare, validate]
    runs-on: ubuntu-latest
    if: needs.validate.result == 'success'

    steps:
      - name: Build distribution
        run: |
          python -m build
          python scripts/release/build_artifacts.py \
            --version ${{ needs.prepare.outputs.version }} \
            --output artifacts.json

      - name: Generate build report
        run: |
          {
            echo "# Build Report"
            echo "## Artifacts"
            cat artifacts.json | jq -r '.artifacts[] | "- " + .'
          } > build-report.md

  changelog:
    name: Generate Changelog
    needs: [prepare, validate]
    runs-on: ubuntu-latest
    if: needs.validate.result == 'success'

    steps:
      - name: Generate changelog
        run: |
          python scripts/release/generate_changelog.py \
            --from ${{ needs.prepare.outputs.previous_version }} \
            --to ${{ needs.prepare.outputs.version }} \
            --output CHANGELOG.md

      - name: Update version files
        run: |
          echo "${{ needs.prepare.outputs.version }}" > version.txt
          sed -i "s/version = .*/version = \"${{ needs.prepare.outputs.version }}\"/" pyproject.toml

      - name: Create changelog PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update changelog for ${{ needs.prepare.outputs.version }}"
          title: "üìù Update Changelog for ${{ needs.prepare.outputs.version }}"
          body: |
            Automated changelog update for version ${{ needs.prepare.outputs.version }}.

            ## Changes
            $(cat CHANGELOG.md)
          branch: docs/changelog-${{ needs.prepare.outputs.version }}
          labels: documentation

  release:
    name: Create Release
    needs: [prepare, validate, build, changelog]
    runs-on: ubuntu-latest
    if: |
      needs.validate.result == 'success' && 
      needs.build.result == 'success' && 
      needs.changelog.result == 'success'

    steps:
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          body_path: CHANGELOG.md
          draft: ${{ github.event.inputs.draft || true }}
          prerelease: ${{ github.event.inputs.prerelease || false }}
          files: |
            dist/*
            artifacts/*

      - name: Publish to PyPI
        if: "!github.event.inputs.draft && !github.event.inputs.prerelease"
        run: |
          python -m twine upload dist/*

  notify:
    name: Send Notifications
    needs: [prepare, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Update metrics
        run: |
          {
            echo "release_completion $(date +%s)"
            echo "release_version ${{ needs.prepare.outputs.version }}"
          } > release_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/release_management \
            --data-binary "@release_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Release Complete"
          description: |
            Version: ${{ needs.prepare.outputs.version }}
            Type: ${{ github.event.inputs.release_type || 'auto' }}
            Status: ${{ needs.release.result == 'success' && '‚úÖ Released' || '‚ùå Failed' }}

            Check the releases page for details.
          color: ${{ needs.release.result == 'success' && '0x00ff00' || '0xff0000' }}
          username: "Release Bot"

      - name: Send release notes
        if: needs.release.result == 'success'
        run: |
          python scripts/release/send_release_notes.py \
            --version ${{ needs.prepare.outputs.version }} \
            --changelog CHANGELOG.md \
            --email-list release-notifications.txt
