name: Performance Profiling

on:
  schedule:
    - cron: "0 0 * * 1" # Weekly on Monday
  workflow_dispatch: # Allow manual trigger
    inputs:
      profile_type:
        description: "Type of profiling"
        required: true
        type: choice
        options:
          - all
          - cpu
          - memory
          - io
          - network
      duration:
        description: "Profile duration in minutes"
        required: true
        type: number
        default: 30

jobs:
  prepare:
    name: Prepare Profiling Environment
    runs-on: ubuntu-latest
    outputs:
      test_id: ${{ steps.setup.outputs.test_id }}

    steps:
      - name: Generate test ID
        id: setup
        run: |
          echo "test_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install py-spy memory_profiler line_profiler pyinstrument

  cpu-profiling:
    name: CPU Profiling
    needs: prepare
    if: github.event.inputs.profile_type == 'cpu' || github.event.inputs.profile_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Profile CPU usage
        run: |
          py-spy record -o cpu_profile.svg -d ${{ github.event.inputs.duration || 30 }}m \
            python src/bot.py

      - name: Profile hot functions
        run: |
          python scripts/profiling/profile_functions.py \
            --duration ${{ github.event.inputs.duration || 30 }} \
            --output function_profile.json

      - name: Generate CPU report
        run: |
          {
            echo "# CPU Profiling Report"
            echo "## CPU Usage Flamegraph"
            echo "![CPU Flamegraph](cpu_profile.svg)"
            echo "## Hot Functions"
            cat function_profile.json | jq -r '.hotspots[] | "- " + .'
          } > cpu-report.md

  memory-profiling:
    name: Memory Profiling
    needs: prepare
    if: github.event.inputs.profile_type == 'memory' || github.event.inputs.profile_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Profile memory usage
        run: |
          python -m memory_profiler scripts/profiling/memory_profile.py \
            --duration ${{ github.event.inputs.duration || 30 }} \
            --output memory_profile.json

      - name: Profile object allocation
        run: |
          python scripts/profiling/profile_allocations.py \
            --duration ${{ github.event.inputs.duration || 30 }} \
            --output allocation_profile.json

      - name: Generate memory report
        run: |
          {
            echo "# Memory Profiling Report"
            echo "## Memory Usage"
            cat memory_profile.json | jq -r '.usage[] | "- " + .'
            echo "## Object Allocations"
            cat allocation_profile.json | jq -r '.allocations[] | "- " + .'
          } > memory-report.md

  io-profiling:
    name: I/O Profiling
    needs: prepare
    if: github.event.inputs.profile_type == 'io' || github.event.inputs.profile_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Profile disk I/O
        run: |
          python scripts/profiling/profile_disk_io.py \
            --duration ${{ github.event.inputs.duration || 30 }} \
            --output disk_profile.json

      - name: Profile database I/O
        run: |
          python scripts/profiling/profile_db_io.py \
            --duration ${{ github.event.inputs.duration || 30 }} \
            --output db_profile.json

      - name: Generate I/O report
        run: |
          {
            echo "# I/O Profiling Report"
            echo "## Disk I/O"
            cat disk_profile.json | jq -r '.operations[] | "- " + .'
            echo "## Database I/O"
            cat db_profile.json | jq -r '.operations[] | "- " + .'
          } > io-report.md

  network-profiling:
    name: Network Profiling
    needs: prepare
    if: github.event.inputs.profile_type == 'network' || github.event.inputs.profile_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Profile network traffic
        run: |
          python scripts/profiling/profile_network.py \
            --duration ${{ github.event.inputs.duration || 30 }} \
            --output network_profile.json

      - name: Profile API calls
        run: |
          python scripts/profiling/profile_api.py \
            --duration ${{ github.event.inputs.duration || 30 }} \
            --output api_profile.json

      - name: Generate network report
        run: |
          {
            echo "# Network Profiling Report"
            echo "## Network Traffic"
            cat network_profile.json | jq -r '.traffic[] | "- " + .'
            echo "## API Calls"
            cat api_profile.json | jq -r '.calls[] | "- " + .'
          } > network-report.md

  analyze:
    name: Analyze Results
    needs:
      [
        prepare,
        cpu-profiling,
        memory-profiling,
        io-profiling,
        network-profiling,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze performance patterns
        run: |
          python scripts/profiling/analyze_patterns.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output pattern_analysis.json

      - name: Identify bottlenecks
        run: |
          python scripts/profiling/identify_bottlenecks.py \
            --test-id ${{ needs.prepare.outputs.test_id }} \
            --output bottleneck_analysis.json

      - name: Generate analysis report
        run: |
          {
            echo "# Performance Analysis Report"
            echo "## Performance Patterns"
            cat pattern_analysis.json | jq -r '.patterns[] | "- " + .'
            echo "## Bottlenecks"
            cat bottleneck_analysis.json | jq -r '.bottlenecks[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs:
      [
        prepare,
        cpu-profiling,
        memory-profiling,
        io-profiling,
        network-profiling,
        analyze,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Performance Profiling Report"
            echo "Test ID: ${{ needs.prepare.outputs.test_id }}"
            echo "Duration: ${{ github.event.inputs.duration || 30 }} minutes"
            
            echo "## CPU Profiling"
            cat cpu-report.md
            
            echo "## Memory Profiling"
            cat memory-report.md
            
            echo "## I/O Profiling"
            cat io-report.md
            
            echo "## Network Profiling"
            cat network-report.md
            
            echo "## Analysis"
            cat analysis-report.md
            
            echo "## Recommendations"
            python scripts/profiling/generate_recommendations.py \
              --analysis analysis-report.md \
              --output recommendations.md
            cat recommendations.md
          } > profiling-report.md

      - name: Create issue for bottlenecks
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('profiling-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ“Š Performance Bottlenecks Detected',
              body: report,
              labels: ['performance', 'profiling']
            });

      - name: Update metrics
        run: |
          {
            echo "profiling_completion $(date +%s)"
            echo "bottlenecks_found $(python scripts/profiling/count_bottlenecks.py analysis-report.md)"
          } > profiling_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/profiling \
            --data-binary "@profiling_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Performance Profiling Complete"
          description: |
            Test ID: ${{ needs.prepare.outputs.test_id }}
            Duration: ${{ github.event.inputs.duration || 30 }} minutes

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Profiling Bot"
