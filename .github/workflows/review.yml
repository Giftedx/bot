name: Review Management

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted, edited, dismissed]
  pull_request_review_comment:
    types: [created, edited, deleted]
  workflow_dispatch: # Allow manual trigger
    inputs:
      review_type:
        description: "Type of review management"
        required: true
        type: choice
        options:
          - all
          - assignment
          - validation
          - metrics
          - cleanup

jobs:
  prepare:
    name: Prepare Review Environment
    runs-on: ubuntu-latest
    outputs:
      review_id: ${{ steps.setup.outputs.review_id }}

    steps:
      - name: Generate review ID
        id: setup
        run: |
          echo "review_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

  assignment:
    name: Review Assignment
    needs: prepare
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest

    steps:
      - name: Analyze PR content
        run: |
          python scripts/review/analyze_pr.py \
            --pr ${{ github.event.pull_request.number }} \
            --output pr_analysis.json

      - name: Select reviewers
        uses: actions/github-script@v7
        with:
          script: |
            const analysis = require('./pr_analysis.json');
            const reviewers = [];

            // Select reviewers based on file changes
            if (analysis.changes.includes('src/')) {
              reviewers.push('code-reviewer');
            }
            if (analysis.changes.includes('docs/')) {
              reviewers.push('docs-reviewer');
            }
            if (analysis.changes.includes('tests/')) {
              reviewers.push('test-reviewer');
            }

            // Request reviews
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: reviewers
            });

      - name: Add review checklist
        uses: actions/github-script@v7
        with:
          script: |
            const checklistBody = `
            ## Review Checklist
            - [ ] Code follows style guidelines
            - [ ] Tests are included and passing
            - [ ] Documentation is updated
            - [ ] Changes are properly described
            - [ ] Security implications considered
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: checklistBody
            });

  validation:
    name: Review Validation
    needs: prepare
    if: github.event_name == 'pull_request_review' && github.event.action == 'submitted'
    runs-on: ubuntu-latest

    steps:
      - name: Validate review comments
        run: |
          python scripts/review/validate_comments.py \
            --review ${{ github.event.review.id }} \
            --output comment_validation.json

      - name: Check review completeness
        run: |
          python scripts/review/check_completeness.py \
            --review ${{ github.event.review.id }} \
            --output completeness_check.json

      - name: Generate validation report
        run: |
          {
            echo "# Review Validation Report"
            echo "## Comment Quality"
            cat comment_validation.json | jq -r '.validation[] | "- " + .'
            echo "## Completeness Check"
            cat completeness_check.json | jq -r '.checks[] | "- " + .'
          } > validation-report.md

  metrics:
    name: Review Metrics
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: Calculate review metrics
        run: |
          python scripts/review/calculate_metrics.py \
            --pr ${{ github.event.pull_request.number }} \
            --output review_metrics.json

      - name: Generate review insights
        run: |
          python scripts/review/generate_insights.py \
            --metrics review_metrics.json \
            --output review_insights.json

      - name: Generate metrics report
        run: |
          {
            echo "# Review Metrics Report"
            echo "## Review Statistics"
            cat review_metrics.json | jq -r '.metrics[] | "- " + .'
            echo "## Review Insights"
            cat review_insights.json | jq -r '.insights[] | "- " + .'
          } > metrics-report.md

  cleanup:
    name: Review Cleanup
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: Clean stale reviews
        run: |
          python scripts/review/clean_stale_reviews.py \
            --output cleanup_results.json

      - name: Update review references
        run: |
          python scripts/review/update_references.py \
            --output reference_updates.json

      - name: Generate cleanup report
        run: |
          {
            echo "# Review Cleanup Report"
            echo "## Cleanup Results"
            cat cleanup_results.json | jq -r '.results[] | "- " + .'
            echo "## Reference Updates"
            cat reference_updates.json | jq -r '.updates[] | "- " + .'
          } > cleanup-report.md

  report:
    name: Generate Report
    needs: [prepare, assignment, validation, metrics, cleanup]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Review Management Report"
            echo "Review ID: ${{ needs.prepare.outputs.review_id }}"
            
            if [ -f "validation-report.md" ]; then
              echo "## Validation"
              cat validation-report.md
            fi
            
            echo "## Metrics"
            cat metrics-report.md
            
            if [ -f "cleanup-report.md" ]; then
              echo "## Cleanup"
              cat cleanup-report.md
            fi
            
            echo "## Recommendations"
            python scripts/review/generate_recommendations.py \
              --metrics review_metrics.json \
              --output recommendations.md
            cat recommendations.md
          } > review-report.md

      - name: Create review summary
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('review-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üëÄ Review Management Summary',
              body: report,
              labels: ['review', 'report']
            });

      - name: Update metrics
        run: |
          {
            echo "review_management_completion $(date +%s)"
            echo "active_reviews $(cat review_metrics.json | jq '.active_reviews')"
            echo "average_review_time $(cat review_metrics.json | jq '.avg_review_time')"
          } > review_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/review_management \
            --data-binary "@review_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Review Management Complete"
          description: |
            Review ID: ${{ needs.prepare.outputs.review_id }}
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Issues Found' || '‚úÖ Successful' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Review Bot"
