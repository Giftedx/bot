name: Project Management

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled]
  pull_request:
    types: [opened, closed, reopened, labeled, unlabeled]
  project_card:
    types: [created, moved, deleted]
  milestone:
    types: [created, closed, opened, edited, deleted]
  workflow_dispatch: # Allow manual trigger
    inputs:
      task_type:
        description: "Type of project management"
        required: true
        type: choice
        options:
          - all
          - organization
          - tracking
          - reporting
          - cleanup

jobs:
  prepare:
    name: Prepare Project Environment
    runs-on: ubuntu-latest
    outputs:
      task_id: ${{ steps.setup.outputs.task_id }}

    steps:
      - name: Generate task ID
        id: setup
        run: |
          echo "task_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

  organization:
    name: Project Organization
    needs: prepare
    if: github.event.inputs.task_type == 'organization' || github.event.inputs.task_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Organize project cards
        uses: actions/github-script@v7
        with:
          script: |
            const columns = {
              'To Do': ['opened', 'reopened'],
              'In Progress': ['in_progress'],
              'Review': ['review_requested'],
              'Done': ['closed']
            };

            // Move cards based on status
            for (const [column, statuses] of Object.entries(columns)) {
              if (statuses.includes(context.payload.action)) {
                await github.rest.projects.moveCard({
                  card_id: context.payload.project_card.id,
                  position: 'top',
                  column_id: getColumnId(column)
                });
              }
            }

      - name: Update milestones
        run: |
          python scripts/project/update_milestones.py \
            --output milestone_updates.json

      - name: Generate organization report
        run: |
          {
            echo "# Project Organization Report"
            echo "## Card Movements"
            echo "- From: ${context.payload.changes?.column_id?.from || 'N/A'}"
            echo "- To: ${context.payload.project_card.column_id}"
            echo "## Milestone Updates"
            cat milestone_updates.json | jq -r '.updates[] | "- " + .'
          } > organization-report.md

  tracking:
    name: Progress Tracking
    needs: prepare
    if: github.event.inputs.task_type == 'tracking' || github.event.inputs.task_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Track milestone progress
        run: |
          python scripts/project/track_milestones.py \
            --output milestone_progress.json

      - name: Track velocity
        run: |
          python scripts/project/track_velocity.py \
            --output velocity_metrics.json

      - name: Generate tracking report
        run: |
          {
            echo "# Progress Tracking Report"
            echo "## Milestone Progress"
            cat milestone_progress.json | jq -r '.progress[] | "- " + .'
            echo "## Team Velocity"
            cat velocity_metrics.json | jq -r '.metrics[] | "- " + .'
          } > tracking-report.md

  reporting:
    name: Project Reporting
    needs: prepare
    if: github.event.inputs.task_type == 'reporting' || github.event.inputs.task_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Generate burndown chart
        run: |
          python scripts/project/generate_burndown.py \
            --output burndown.png

      - name: Calculate metrics
        run: |
          python scripts/project/calculate_metrics.py \
            --output project_metrics.json

      - name: Generate project report
        run: |
          {
            echo "# Project Status Report"
            echo "## Project Metrics"
            cat project_metrics.json | jq -r '.metrics[] | "- " + .'
            echo "## Burndown Chart"
            echo "![Burndown Chart](burndown.png)"
          } > project-report.md

  cleanup:
    name: Project Cleanup
    needs: prepare
    if: github.event.inputs.task_type == 'cleanup' || github.event.inputs.task_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Archive completed milestones
        run: |
          python scripts/project/archive_milestones.py \
            --output archive_results.json

      - name: Clean stale cards
        run: |
          python scripts/project/clean_stale_cards.py \
            --output cleanup_results.json

      - name: Generate cleanup report
        run: |
          {
            echo "# Project Cleanup Report"
            echo "## Archived Milestones"
            cat archive_results.json | jq -r '.archived[] | "- " + .'
            echo "## Cleaned Cards"
            cat cleanup_results.json | jq -r '.cleaned[] | "- " + .'
          } > cleanup-report.md

  analyze:
    name: Analyze Results
    needs: [prepare, organization, tracking, reporting, cleanup]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Analyze trends
        run: |
          python scripts/project/analyze_trends.py \
            --task-id ${{ needs.prepare.outputs.task_id }} \
            --output trend_analysis.json

      - name: Generate recommendations
        run: |
          python scripts/project/generate_recommendations.py \
            --analysis trend_analysis.json \
            --output recommendations.json

      - name: Generate analysis report
        run: |
          {
            echo "# Project Analysis Report"
            echo "## Trends"
            cat trend_analysis.json | jq -r '.trends[] | "- " + .'
            echo "## Recommendations"
            cat recommendations.json | jq -r '.recommendations[] | "- " + .'
          } > analysis-report.md

  report:
    name: Generate Report
    needs: [prepare, organization, tracking, reporting, cleanup, analyze]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Project Management Report"
            echo "Task ID: ${{ needs.prepare.outputs.task_id }}"
            
            echo "## Organization"
            cat organization-report.md
            
            echo "## Progress Tracking"
            cat tracking-report.md
            
            echo "## Project Status"
            cat project-report.md
            
            echo "## Cleanup"
            cat cleanup-report.md
            
            echo "## Analysis"
            cat analysis-report.md
          } > project-management-report.md

      - name: Create project summary
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('project-management-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìä Project Management Summary',
              body: report,
              labels: ['project', 'report']
            });

      - name: Update metrics
        run: |
          {
            echo "project_management_completion $(date +%s)"
            echo "open_milestones $(cat project_metrics.json | jq '.open_milestones')"
            echo "completion_rate $(cat project_metrics.json | jq '.completion_rate')"
          } > project_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/project_management \
            --data-binary "@project_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Project Management Complete"
          description: |
            Task ID: ${{ needs.prepare.outputs.task_id }}
            Status: ${{ contains(needs.*.result, 'failure') && '‚ùå Issues Found' || '‚úÖ Successful' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Project Bot"
