name: Dependency Management

on:
  schedule:
    - cron: "0 0 * * 1" # Weekly on Monday
  push:
    paths:
      - "requirements*.txt"
      - "pyproject.toml"
      - "setup.py"
      - ".github/workflows/dependencies.yml"
  pull_request:
    paths:
      - "requirements*.txt"
      - "pyproject.toml"
      - "setup.py"
  workflow_dispatch: # Allow manual trigger
    inputs:
      update_type:
        description: "Type of dependency update"
        required: true
        type: choice
        options:
          - all
          - security
          - major
          - minor
          - patch

jobs:
  prepare:
    name: Prepare Update Environment
    runs-on: ubuntu-latest
    outputs:
      update_id: ${{ steps.setup.outputs.update_id }}

    steps:
      - name: Generate update ID
        id: setup
        run: |
          echo "update_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools safety pyup-checker

  check-updates:
    name: Check for Updates
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: Check pip updates
        run: |
          pip list --outdated --format=json > pip_updates.json

      - name: Check security updates
        run: |
          safety check --json > security_updates.json

      - name: Generate update report
        run: |
          {
            echo "# Dependency Update Report"
            echo "## Available Updates"
            cat pip_updates.json | jq -r '.[] | "- " + .name + ": " + .version + " -> " + .latest_version'
            echo "## Security Updates"
            cat security_updates.json | jq -r '.[] | "- " + .[0] + ": " + .[1]'
          } > update-report.md

  analyze-impact:
    name: Analyze Update Impact
    needs: [prepare, check-updates]
    runs-on: ubuntu-latest

    steps:
      - name: Analyze dependencies
        run: |
          python scripts/dependencies/analyze_dependencies.py \
            --updates pip_updates.json \
            --output dependency_analysis.json

      - name: Check compatibility
        run: |
          python scripts/dependencies/check_compatibility.py \
            --updates pip_updates.json \
            --output compatibility_check.json

      - name: Generate analysis report
        run: |
          {
            echo "# Update Impact Analysis"
            echo "## Dependency Analysis"
            cat dependency_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Compatibility Check"
            cat compatibility_check.json | jq -r '.checks[] | "- " + .'
          } > analysis-report.md

  update-dependencies:
    name: Update Dependencies
    needs: [prepare, check-updates, analyze-impact]
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Update requirements
        run: |
          python scripts/dependencies/update_requirements.py \
            --type ${{ github.event.inputs.update_type || 'all' }} \
            --output update_results.json

      - name: Run tests
        run: |
          pytest tests/ -v

      - name: Generate update results
        run: |
          {
            echo "# Update Results"
            echo "## Updated Packages"
            cat update_results.json | jq -r '.updates[] | "- " + .'
            echo "## Test Results"
            cat test_results.xml | xq '.'
          } > results-report.md

  create-pr:
    name: Create Update PR
    needs: [prepare, update-dependencies]
    runs-on: ubuntu-latest
    if: needs.update-dependencies.result == 'success'

    steps:
      - name: Create pull request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "build(deps): update dependencies"
          title: "⬆️ Update Dependencies"
          body: |
            Automated dependency updates.

            ## Updates
            $(cat update_results.json | jq -r '.updates[] | "- " + .')

            ## Impact Analysis
            $(cat analysis-report.md)

            ## Test Results
            All tests passed successfully.
          branch: deps/update-${{ needs.prepare.outputs.update_id }}
          labels: dependencies,automated-pr
          assignees: project-maintainer

  verify:
    name: Verify Updates
    needs: [prepare, update-dependencies]
    runs-on: ubuntu-latest
    if: needs.update-dependencies.result == 'success'

    steps:
      - name: Run security check
        run: |
          safety check --full-report --json > security_check.json

      - name: Run dependency check
        run: |
          pip check > dependency_check.txt

      - name: Generate verification report
        run: |
          {
            echo "# Update Verification Report"
            echo "## Security Check"
            cat security_check.json | jq -r '.[] | "- " + .[0] + ": " + .[1]'
            echo "## Dependency Check"
            cat dependency_check.txt
          } > verification-report.md

  report:
    name: Generate Report
    needs: [prepare, check-updates, analyze-impact, update-dependencies, verify]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Dependency Management Report"
            echo "Update ID: ${{ needs.prepare.outputs.update_id }}"
            
            echo "## Update Check"
            cat update-report.md
            
            echo "## Impact Analysis"
            cat analysis-report.md
            
            if [ -f "results-report.md" ]; then
              echo "## Update Results"
              cat results-report.md
            fi
            
            if [ -f "verification-report.md" ]; then
              echo "## Verification"
              cat verification-report.md
            fi
          } > dependency-report.md

      - name: Create issue for problems
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('dependency-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📦 Dependency Update Issues',
              body: report,
              labels: ['dependencies', 'needs-review']
            });

      - name: Update metrics
        run: |
          {
            echo "dependency_update_completion $(date +%s)"
            echo "updates_available $(python scripts/dependencies/count_updates.py update-report.md)"
            echo "security_updates $(python scripts/dependencies/count_security.py security_updates.json)"
          } > dependency_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/dependency_management \
            --data-binary "@dependency_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Dependency Updates Complete"
          description: |
            Update ID: ${{ needs.prepare.outputs.update_id }}
            Type: ${{ github.event.inputs.update_type || 'all' }}

            Check the workflow run for detailed results.
          color: ${{ contains(needs.*.result, 'failure') && '0xff0000' || '0x00ff00' }}
          username: "Dependency Bot"
