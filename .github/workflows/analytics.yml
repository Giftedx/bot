name: Analytics Collection

on:
  schedule:
    - cron: "0 0 * * *" # Daily at midnight
  workflow_dispatch: # Allow manual trigger
    inputs:
      analysis_type:
        description: "Type of analytics"
        required: true
        type: choice
        options:
          - all
          - usage
          - performance
          - engagement
          - trends
      time_range:
        description: "Analysis time range (days)"
        required: true
        type: number
        default: 7

jobs:
  prepare:
    name: Prepare Analytics Environment
    runs-on: ubuntu-latest
    outputs:
      analysis_id: ${{ steps.setup.outputs.analysis_id }}

    steps:
      - name: Generate analysis ID
        id: setup
        run: |
          echo "analysis_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pandas numpy matplotlib seaborn plotly

  usage:
    name: Usage Analytics
    needs: prepare
    if: github.event.inputs.analysis_type == 'usage' || github.event.inputs.analysis_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Analyze command usage
        run: |
          python scripts/analytics/analyze_commands.py \
            --days ${{ github.event.inputs.time_range || 7 }} \
            --output command_analysis.json

      - name: Analyze user activity
        run: |
          python scripts/analytics/analyze_activity.py \
            --days ${{ github.event.inputs.time_range || 7 }} \
            --output activity_analysis.json

      - name: Generate usage report
        run: |
          {
            echo "# Usage Analytics Report"
            echo "## Command Usage"
            cat command_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## User Activity"
            cat activity_analysis.json | jq -r '.analysis[] | "- " + .'
          } > usage-report.md

  performance:
    name: Performance Analytics
    needs: prepare
    if: github.event.inputs.analysis_type == 'performance' || github.event.inputs.analysis_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Analyze response times
        run: |
          python scripts/analytics/analyze_response_times.py \
            --days ${{ github.event.inputs.time_range || 7 }} \
            --output response_analysis.json

      - name: Analyze resource usage
        run: |
          python scripts/analytics/analyze_resources.py \
            --days ${{ github.event.inputs.time_range || 7 }} \
            --output resource_analysis.json

      - name: Generate performance report
        run: |
          {
            echo "# Performance Analytics Report"
            echo "## Response Times"
            cat response_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Resource Usage"
            cat resource_analysis.json | jq -r '.analysis[] | "- " + .'
          } > performance-report.md

  engagement:
    name: Engagement Analytics
    needs: prepare
    if: github.event.inputs.analysis_type == 'engagement' || github.event.inputs.analysis_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Analyze user retention
        run: |
          python scripts/analytics/analyze_retention.py \
            --days ${{ github.event.inputs.time_range || 7 }} \
            --output retention_analysis.json

      - name: Analyze feature adoption
        run: |
          python scripts/analytics/analyze_adoption.py \
            --days ${{ github.event.inputs.time_range || 7 }} \
            --output adoption_analysis.json

      - name: Generate engagement report
        run: |
          {
            echo "# Engagement Analytics Report"
            echo "## User Retention"
            cat retention_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Feature Adoption"
            cat adoption_analysis.json | jq -r '.analysis[] | "- " + .'
          } > engagement-report.md

  trends:
    name: Trend Analytics
    needs: prepare
    if: github.event.inputs.analysis_type == 'trends' || github.event.inputs.analysis_type == 'all'
    runs-on: ubuntu-latest

    steps:
      - name: Analyze growth trends
        run: |
          python scripts/analytics/analyze_growth.py \
            --days ${{ github.event.inputs.time_range || 7 }} \
            --output growth_analysis.json

      - name: Analyze usage patterns
        run: |
          python scripts/analytics/analyze_patterns.py \
            --days ${{ github.event.inputs.time_range || 7 }} \
            --output pattern_analysis.json

      - name: Generate trends report
        run: |
          {
            echo "# Trend Analytics Report"
            echo "## Growth Trends"
            cat growth_analysis.json | jq -r '.analysis[] | "- " + .'
            echo "## Usage Patterns"
            cat pattern_analysis.json | jq -r '.analysis[] | "- " + .'
          } > trends-report.md

  visualize:
    name: Generate Visualizations
    needs: [prepare, usage, performance, engagement, trends]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Create usage charts
        run: |
          python scripts/analytics/visualize_usage.py \
            --analysis-id ${{ needs.prepare.outputs.analysis_id }} \
            --output usage_charts.html

      - name: Create performance charts
        run: |
          python scripts/analytics/visualize_performance.py \
            --analysis-id ${{ needs.prepare.outputs.analysis_id }} \
            --output performance_charts.html

      - name: Create trend charts
        run: |
          python scripts/analytics/visualize_trends.py \
            --analysis-id ${{ needs.prepare.outputs.analysis_id }} \
            --output trend_charts.html

      - name: Generate visualization report
        run: |
          {
            echo "# Analytics Visualizations"
            echo "## Usage Charts"
            cat usage_charts.html
            echo "## Performance Charts"
            cat performance_charts.html
            echo "## Trend Charts"
            cat trend_charts.html
          } > visualization-report.md

  report:
    name: Generate Report
    needs: [prepare, usage, performance, engagement, trends, visualize]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Combine reports
        run: |
          {
            echo "# Analytics Report"
            echo "Analysis ID: ${{ needs.prepare.outputs.analysis_id }}"
            echo "Time Range: ${{ github.event.inputs.time_range || 7 }} days"
            
            echo "## Usage Analytics"
            cat usage-report.md
            
            echo "## Performance Analytics"
            cat performance-report.md
            
            echo "## Engagement Analytics"
            cat engagement-report.md
            
            echo "## Trend Analytics"
            cat trends-report.md
            
            echo "## Visualizations"
            cat visualization-report.md
            
            echo "## Insights"
            python scripts/analytics/generate_insights.py \
              --reports "*.md" \
              --output insights.md
            cat insights.md
            
            echo "## Recommendations"
            python scripts/analytics/generate_recommendations.py \
              --insights insights.md \
              --output recommendations.md
            cat recommendations.md
          } > analytics-report.md

      - name: Upload to storage
        run: |
          aws s3 cp analytics-report.md \
            s3://${{ secrets.ANALYTICS_BUCKET }}/reports/${{ needs.prepare.outputs.analysis_id }}.md

      - name: Create analytics issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('analytics-report.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ“Š Analytics Report',
              body: report,
              labels: ['analytics', 'report']
            });

      - name: Update metrics
        run: |
          {
            echo "analytics_completion $(date +%s)"
            echo "analytics_insights $(python scripts/analytics/count_insights.py insights.md)"
          } > analytics_metrics.txt

          curl -X POST ${{ secrets.PROMETHEUS_PUSHGATEWAY }}/metrics/job/analytics \
            --data-binary "@analytics_metrics.txt"

      - name: Notify team
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Analytics Report Complete"
          description: |
            Analysis ID: ${{ needs.prepare.outputs.analysis_id }}
            Time Range: ${{ github.event.inputs.time_range || 7 }} days

            Check the workflow run for detailed results.
          color: "0x00ff00"
          username: "Analytics Bot"
